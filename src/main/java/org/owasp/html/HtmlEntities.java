// Copyright (c) 2011, Mike Samuel
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
// Neither the name of the OWASP nor the names of its contributors may
// be used to endorse or promote products derived from this software
// without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

package org.owasp.html;

import static java.lang.Character.MIN_HIGH_SURROGATE;
import static java.lang.Character.MIN_LOW_SURROGATE;
import static java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT;

import java.util.Map;

import com.google.common.collect.ImmutableMap;

/**
 * Utilities for decoding HTML entities, e.g., {@code &amp;}.
 */
final class HtmlEntities {

  /**
   * A trie that maps entity names to code-units. Values are one or two 16-bit
   * code-units packed into 32 bits.
   * The first 16 bits are the first code-unit. The second 16 bits are either
   * the second code-unit or 0x0000 if there is only one code-unit.
   */
  public static final Trie ENTITY_TRIE;

  private static final int LONGEST_ENTITY_NAME;

  static {
    final ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();

    // Source data: https://html.spec.whatwg.org/multipage/named-characters.html

    builder.put("AElig", ((int) '\u00c6') << 16);
    builder.put("AMP", ((int) '\u0026') << 16);
    builder.put("Aacute", ((int) '\u00c1') << 16);
    builder.put("Abreve", ((int) '\u0102') << 16);
    builder.put("Acirc", ((int) '\u00c2') << 16);
    builder.put("Acy", ((int) '\u0410') << 16);
    builder.put("Afr", (((int) '\ud835') << 16) | '\udd04');
    builder.put("Agrave", ((int) '\u00c0') << 16);
    builder.put("Alpha", ((int) '\u0391') << 16);
    builder.put("Amacr", ((int) '\u0100') << 16);
    builder.put("And", ((int) '\u2a53') << 16);
    builder.put("Aogon", ((int) '\u0104') << 16);
    builder.put("Aopf", (((int) '\ud835') << 16) | '\udd38');
    builder.put("ApplyFunction", ((int) '\u2061') << 16);
    builder.put("Aring", ((int) '\u00c5') << 16);
    builder.put("Ascr", (((int) '\ud835') << 16) | '\udc9c');
    builder.put("Assign", ((int) '\u2254') << 16);
    builder.put("Atilde", ((int) '\u00c3') << 16);
    builder.put("Auml", ((int) '\u00c4') << 16);
    builder.put("Backslash", ((int) '\u2216') << 16);
    builder.put("Barv", ((int) '\u2ae7') << 16);
    builder.put("Barwed", ((int) '\u2306') << 16);
    builder.put("Bcy", ((int) '\u0411') << 16);
    builder.put("Because", ((int) '\u2235') << 16);
    builder.put("Bernoullis", ((int) '\u212c') << 16);
    builder.put("Beta", ((int) '\u0392') << 16);
    builder.put("Bfr", (((int) '\ud835') << 16) | '\udd05');
    builder.put("Bopf", (((int) '\ud835') << 16) | '\udd39');
    builder.put("Breve", ((int) '\u02d8') << 16);
    builder.put("Bscr", ((int) '\u212c') << 16);
    builder.put("Bumpeq", ((int) '\u224e') << 16);
    builder.put("CHcy", ((int) '\u0427') << 16);
    builder.put("COPY", ((int) '\u00a9') << 16);
    builder.put("Cacute", ((int) '\u0106') << 16);
    builder.put("Cap", ((int) '\u22d2') << 16);
    builder.put("CapitalDifferentialD", ((int) '\u2145') << 16);
    builder.put("Cayleys", ((int) '\u212d') << 16);
    builder.put("Ccaron", ((int) '\u010c') << 16);
    builder.put("Ccedil", ((int) '\u00c7') << 16);
    builder.put("Ccirc", ((int) '\u0108') << 16);
    builder.put("Cconint", ((int) '\u2230') << 16);
    builder.put("Cdot", ((int) '\u010a') << 16);
    builder.put("Cedilla", ((int) '\u00b8') << 16);
    builder.put("CenterDot", ((int) '\u00b7') << 16);
    builder.put("Cfr", ((int) '\u212d') << 16);
    builder.put("Chi", ((int) '\u03a7') << 16);
    builder.put("CircleDot", ((int) '\u2299') << 16);
    builder.put("CircleMinus", ((int) '\u2296') << 16);
    builder.put("CirclePlus", ((int) '\u2295') << 16);
    builder.put("CircleTimes", ((int) '\u2297') << 16);
    builder.put("ClockwiseContourIntegral", ((int) '\u2232') << 16);
    builder.put("CloseCurlyDoubleQuote", ((int) '\u201d') << 16);
    builder.put("CloseCurlyQuote", ((int) '\u2019') << 16);
    builder.put("Colon", ((int) '\u2237') << 16);
    builder.put("Colone", ((int) '\u2a74') << 16);
    builder.put("Congruent", ((int) '\u2261') << 16);
    builder.put("Conint", ((int) '\u222f') << 16);
    builder.put("ContourIntegral", ((int) '\u222e') << 16);
    builder.put("Copf", ((int) '\u2102') << 16);
    builder.put("Coproduct", ((int) '\u2210') << 16);
    builder.put("CounterClockwiseContourIntegral", ((int) '\u2233') << 16);
    builder.put("Cross", ((int) '\u2a2f') << 16);
    builder.put("Cscr", (((int) '\ud835') << 16) | '\udc9e');
    builder.put("Cup", ((int) '\u22d3') << 16);
    builder.put("CupCap", ((int) '\u224d') << 16);
    builder.put("DD", ((int) '\u2145') << 16);
    builder.put("DDotrahd", ((int) '\u2911') << 16);
    builder.put("DJcy", ((int) '\u0402') << 16);
    builder.put("DScy", ((int) '\u0405') << 16);
    builder.put("DZcy", ((int) '\u040f') << 16);
    builder.put("Dagger", ((int) '\u2021') << 16);
    builder.put("Darr", ((int) '\u21a1') << 16);
    builder.put("Dashv", ((int) '\u2ae4') << 16);
    builder.put("Dcaron", ((int) '\u010e') << 16);
    builder.put("Dcy", ((int) '\u0414') << 16);
    builder.put("Del", ((int) '\u2207') << 16);
    builder.put("Delta", ((int) '\u0394') << 16);
    builder.put("Dfr", (((int) '\ud835') << 16) | '\udd07');
    builder.put("DiacriticalAcute", ((int) '\u00b4') << 16);
    builder.put("DiacriticalDot", ((int) '\u02d9') << 16);
    builder.put("DiacriticalDoubleAcute", ((int) '\u02dd') << 16);
    builder.put("DiacriticalGrave", ((int) '\u0060') << 16);
    builder.put("DiacriticalTilde", ((int) '\u02dc') << 16);
    builder.put("Diamond", ((int) '\u22c4') << 16);
    builder.put("DifferentialD", ((int) '\u2146') << 16);
    builder.put("Dopf", (((int) '\ud835') << 16) | '\udd3b');
    builder.put("Dot", ((int) '\u00a8') << 16);
    builder.put("DotDot", ((int) '\u20dc') << 16);
    builder.put("DotEqual", ((int) '\u2250') << 16);
    builder.put("DoubleContourIntegral", ((int) '\u222f') << 16);
    builder.put("DoubleDot", ((int) '\u00a8') << 16);
    builder.put("DoubleDownArrow", ((int) '\u21d3') << 16);
    builder.put("DoubleLeftArrow", ((int) '\u21d0') << 16);
    builder.put("DoubleLeftRightArrow", ((int) '\u21d4') << 16);
    builder.put("DoubleLeftTee", ((int) '\u2ae4') << 16);
    builder.put("DoubleLongLeftArrow", ((int) '\u27f8') << 16);
    builder.put("DoubleLongLeftRightArrow", ((int) '\u27fa') << 16);
    builder.put("DoubleLongRightArrow", ((int) '\u27f9') << 16);
    builder.put("DoubleRightArrow", ((int) '\u21d2') << 16);
    builder.put("DoubleRightTee", ((int) '\u22a8') << 16);
    builder.put("DoubleUpArrow", ((int) '\u21d1') << 16);
    builder.put("DoubleUpDownArrow", ((int) '\u21d5') << 16);
    builder.put("DoubleVerticalBar", ((int) '\u2225') << 16);
    builder.put("DownArrow", ((int) '\u2193') << 16);
    builder.put("DownArrowBar", ((int) '\u2913') << 16);
    builder.put("DownArrowUpArrow", ((int) '\u21f5') << 16);
    builder.put("DownBreve", ((int) '\u0311') << 16);
    builder.put("DownLeftRightVector", ((int) '\u2950') << 16);
    builder.put("DownLeftTeeVector", ((int) '\u295e') << 16);
    builder.put("DownLeftVector", ((int) '\u21bd') << 16);
    builder.put("DownLeftVectorBar", ((int) '\u2956') << 16);
    builder.put("DownRightTeeVector", ((int) '\u295f') << 16);
    builder.put("DownRightVector", ((int) '\u21c1') << 16);
    builder.put("DownRightVectorBar", ((int) '\u2957') << 16);
    builder.put("DownTee", ((int) '\u22a4') << 16);
    builder.put("DownTeeArrow", ((int) '\u21a7') << 16);
    builder.put("Downarrow", ((int) '\u21d3') << 16);
    builder.put("Dscr", (((int) '\ud835') << 16) | '\udc9f');
    builder.put("Dstrok", ((int) '\u0110') << 16);
    builder.put("ENG", ((int) '\u014a') << 16);
    builder.put("ETH", ((int) '\u00d0') << 16);
    builder.put("Eacute", ((int) '\u00c9') << 16);
    builder.put("Ecaron", ((int) '\u011a') << 16);
    builder.put("Ecirc", ((int) '\u00ca') << 16);
    builder.put("Ecy", ((int) '\u042d') << 16);
    builder.put("Edot", ((int) '\u0116') << 16);
    builder.put("Efr", (((int) '\ud835') << 16) | '\udd08');
    builder.put("Egrave", ((int) '\u00c8') << 16);
    builder.put("Element", ((int) '\u2208') << 16);
    builder.put("Emacr", ((int) '\u0112') << 16);
    builder.put("EmptySmallSquare", ((int) '\u25fb') << 16);
    builder.put("EmptyVerySmallSquare", ((int) '\u25ab') << 16);
    builder.put("Eogon", ((int) '\u0118') << 16);
    builder.put("Eopf", (((int) '\ud835') << 16) | '\udd3c');
    builder.put("Epsilon", ((int) '\u0395') << 16);
    builder.put("Equal", ((int) '\u2a75') << 16);
    builder.put("EqualTilde", ((int) '\u2242') << 16);
    builder.put("Equilibrium", ((int) '\u21cc') << 16);
    builder.put("Escr", ((int) '\u2130') << 16);
    builder.put("Esim", ((int) '\u2a73') << 16);
    builder.put("Eta", ((int) '\u0397') << 16);
    builder.put("Euml", ((int) '\u00cb') << 16);
    builder.put("Exists", ((int) '\u2203') << 16);
    builder.put("ExponentialE", ((int) '\u2147') << 16);
    builder.put("Fcy", ((int) '\u0424') << 16);
    builder.put("Ffr", (((int) '\ud835') << 16) | '\udd09');
    builder.put("FilledSmallSquare", ((int) '\u25fc') << 16);
    builder.put("FilledVerySmallSquare", ((int) '\u25aa') << 16);
    builder.put("Fopf", (((int) '\ud835') << 16) | '\udd3d');
    builder.put("ForAll", ((int) '\u2200') << 16);
    builder.put("Fouriertrf", ((int) '\u2131') << 16);
    builder.put("Fscr", ((int) '\u2131') << 16);
    builder.put("GJcy", ((int) '\u0403') << 16);
    builder.put("GT", ((int) '\u003e') << 16);
    builder.put("Gamma", ((int) '\u0393') << 16);
    builder.put("Gammad", ((int) '\u03dc') << 16);
    builder.put("Gbreve", ((int) '\u011e') << 16);
    builder.put("Gcedil", ((int) '\u0122') << 16);
    builder.put("Gcirc", ((int) '\u011c') << 16);
    builder.put("Gcy", ((int) '\u0413') << 16);
    builder.put("Gdot", ((int) '\u0120') << 16);
    builder.put("Gfr", (((int) '\ud835') << 16) | '\udd0a');
    builder.put("Gg", ((int) '\u22d9') << 16);
    builder.put("Gopf", (((int) '\ud835') << 16) | '\udd3e');
    builder.put("GreaterEqual", ((int) '\u2265') << 16);
    builder.put("GreaterEqualLess", ((int) '\u22db') << 16);
    builder.put("GreaterFullEqual", ((int) '\u2267') << 16);
    builder.put("GreaterGreater", ((int) '\u2aa2') << 16);
    builder.put("GreaterLess", ((int) '\u2277') << 16);
    builder.put("GreaterSlantEqual", ((int) '\u2a7e') << 16);
    builder.put("GreaterTilde", ((int) '\u2273') << 16);
    builder.put("Gscr", (((int) '\ud835') << 16) | '\udca2');
    builder.put("Gt", ((int) '\u226b') << 16);
    builder.put("HARDcy", ((int) '\u042a') << 16);
    builder.put("Hacek", ((int) '\u02c7') << 16);
    builder.put("Hat", ((int) '\u005e') << 16);
    builder.put("Hcirc", ((int) '\u0124') << 16);
    builder.put("Hfr", ((int) '\u210c') << 16);
    builder.put("HilbertSpace", ((int) '\u210b') << 16);
    builder.put("Hopf", ((int) '\u210d') << 16);
    builder.put("HorizontalLine", ((int) '\u2500') << 16);
    builder.put("Hscr", ((int) '\u210b') << 16);
    builder.put("Hstrok", ((int) '\u0126') << 16);
    builder.put("HumpDownHump", ((int) '\u224e') << 16);
    builder.put("HumpEqual", ((int) '\u224f') << 16);
    builder.put("IEcy", ((int) '\u0415') << 16);
    builder.put("IJlig", ((int) '\u0132') << 16);
    builder.put("IOcy", ((int) '\u0401') << 16);
    builder.put("Iacute", ((int) '\u00cd') << 16);
    builder.put("Icirc", ((int) '\u00ce') << 16);
    builder.put("Icy", ((int) '\u0418') << 16);
    builder.put("Idot", ((int) '\u0130') << 16);
    builder.put("Ifr", ((int) '\u2111') << 16);
    builder.put("Igrave", ((int) '\u00cc') << 16);
    builder.put("Im", ((int) '\u2111') << 16);
    builder.put("Imacr", ((int) '\u012a') << 16);
    builder.put("ImaginaryI", ((int) '\u2148') << 16);
    builder.put("Implies", ((int) '\u21d2') << 16);
    builder.put("Int", ((int) '\u222c') << 16);
    builder.put("Integral", ((int) '\u222b') << 16);
    builder.put("Intersection", ((int) '\u22c2') << 16);
    builder.put("InvisibleComma", ((int) '\u2063') << 16);
    builder.put("InvisibleTimes", ((int) '\u2062') << 16);
    builder.put("Iogon", ((int) '\u012e') << 16);
    builder.put("Iopf", (((int) '\ud835') << 16) | '\udd40');
    builder.put("Iota", ((int) '\u0399') << 16);
    builder.put("Iscr", ((int) '\u2110') << 16);
    builder.put("Itilde", ((int) '\u0128') << 16);
    builder.put("Iukcy", ((int) '\u0406') << 16);
    builder.put("Iuml", ((int) '\u00cf') << 16);
    builder.put("Jcirc", ((int) '\u0134') << 16);
    builder.put("Jcy", ((int) '\u0419') << 16);
    builder.put("Jfr", (((int) '\ud835') << 16) | '\udd0d');
    builder.put("Jopf", (((int) '\ud835') << 16) | '\udd41');
    builder.put("Jscr", (((int) '\ud835') << 16) | '\udca5');
    builder.put("Jsercy", ((int) '\u0408') << 16);
    builder.put("Jukcy", ((int) '\u0404') << 16);
    builder.put("KHcy", ((int) '\u0425') << 16);
    builder.put("KJcy", ((int) '\u040c') << 16);
    builder.put("Kappa", ((int) '\u039a') << 16);
    builder.put("Kcedil", ((int) '\u0136') << 16);
    builder.put("Kcy", ((int) '\u041a') << 16);
    builder.put("Kfr", (((int) '\ud835') << 16) | '\udd0e');
    builder.put("Kopf", (((int) '\ud835') << 16) | '\udd42');
    builder.put("Kscr", (((int) '\ud835') << 16) | '\udca6');
    builder.put("LJcy", ((int) '\u0409') << 16);
    builder.put("LT", ((int) '\u003c') << 16);
    builder.put("Lacute", ((int) '\u0139') << 16);
    builder.put("Lambda", ((int) '\u039b') << 16);
    builder.put("Lang", ((int) '\u27ea') << 16);
    builder.put("Laplacetrf", ((int) '\u2112') << 16);
    builder.put("Larr", ((int) '\u219e') << 16);
    builder.put("Lcaron", ((int) '\u013d') << 16);
    builder.put("Lcedil", ((int) '\u013b') << 16);
    builder.put("Lcy", ((int) '\u041b') << 16);
    builder.put("LeftAngleBracket", ((int) '\u27e8') << 16);
    builder.put("LeftArrow", ((int) '\u2190') << 16);
    builder.put("LeftArrowBar", ((int) '\u21e4') << 16);
    builder.put("LeftArrowRightArrow", ((int) '\u21c6') << 16);
    builder.put("LeftCeiling", ((int) '\u2308') << 16);
    builder.put("LeftDoubleBracket", ((int) '\u27e6') << 16);
    builder.put("LeftDownTeeVector", ((int) '\u2961') << 16);
    builder.put("LeftDownVector", ((int) '\u21c3') << 16);
    builder.put("LeftDownVectorBar", ((int) '\u2959') << 16);
    builder.put("LeftFloor", ((int) '\u230a') << 16);
    builder.put("LeftRightArrow", ((int) '\u2194') << 16);
    builder.put("LeftRightVector", ((int) '\u294e') << 16);
    builder.put("LeftTee", ((int) '\u22a3') << 16);
    builder.put("LeftTeeArrow", ((int) '\u21a4') << 16);
    builder.put("LeftTeeVector", ((int) '\u295a') << 16);
    builder.put("LeftTriangle", ((int) '\u22b2') << 16);
    builder.put("LeftTriangleBar", ((int) '\u29cf') << 16);
    builder.put("LeftTriangleEqual", ((int) '\u22b4') << 16);
    builder.put("LeftUpDownVector", ((int) '\u2951') << 16);
    builder.put("LeftUpTeeVector", ((int) '\u2960') << 16);
    builder.put("LeftUpVector", ((int) '\u21bf') << 16);
    builder.put("LeftUpVectorBar", ((int) '\u2958') << 16);
    builder.put("LeftVector", ((int) '\u21bc') << 16);
    builder.put("LeftVectorBar", ((int) '\u2952') << 16);
    builder.put("Leftarrow", ((int) '\u21d0') << 16);
    builder.put("Leftrightarrow", ((int) '\u21d4') << 16);
    builder.put("LessEqualGreater", ((int) '\u22da') << 16);
    builder.put("LessFullEqual", ((int) '\u2266') << 16);
    builder.put("LessGreater", ((int) '\u2276') << 16);
    builder.put("LessLess", ((int) '\u2aa1') << 16);
    builder.put("LessSlantEqual", ((int) '\u2a7d') << 16);
    builder.put("LessTilde", ((int) '\u2272') << 16);
    builder.put("Lfr", (((int) '\ud835') << 16) | '\udd0f');
    builder.put("Ll", ((int) '\u22d8') << 16);
    builder.put("Lleftarrow", ((int) '\u21da') << 16);
    builder.put("Lmidot", ((int) '\u013f') << 16);
    builder.put("LongLeftArrow", ((int) '\u27f5') << 16);
    builder.put("LongLeftRightArrow", ((int) '\u27f7') << 16);
    builder.put("LongRightArrow", ((int) '\u27f6') << 16);
    builder.put("Longleftarrow", ((int) '\u27f8') << 16);
    builder.put("Longleftrightarrow", ((int) '\u27fa') << 16);
    builder.put("Longrightarrow", ((int) '\u27f9') << 16);
    builder.put("Lopf", (((int) '\ud835') << 16) | '\udd43');
    builder.put("LowerLeftArrow", ((int) '\u2199') << 16);
    builder.put("LowerRightArrow", ((int) '\u2198') << 16);
    builder.put("Lscr", ((int) '\u2112') << 16);
    builder.put("Lsh", ((int) '\u21b0') << 16);
    builder.put("Lstrok", ((int) '\u0141') << 16);
    builder.put("Lt", ((int) '\u226a') << 16);
    builder.put("Map", ((int) '\u2905') << 16);
    builder.put("Mcy", ((int) '\u041c') << 16);
    builder.put("MediumSpace", ((int) '\u205f') << 16);
    builder.put("Mellintrf", ((int) '\u2133') << 16);
    builder.put("Mfr", (((int) '\ud835') << 16) | '\udd10');
    builder.put("MinusPlus", ((int) '\u2213') << 16);
    builder.put("Mopf", (((int) '\ud835') << 16) | '\udd44');
    builder.put("Mscr", ((int) '\u2133') << 16);
    builder.put("Mu", ((int) '\u039c') << 16);
    builder.put("NJcy", ((int) '\u040a') << 16);
    builder.put("Nacute", ((int) '\u0143') << 16);
    builder.put("Ncaron", ((int) '\u0147') << 16);
    builder.put("Ncedil", ((int) '\u0145') << 16);
    builder.put("Ncy", ((int) '\u041d') << 16);
    builder.put("NegativeMediumSpace", ((int) '\u200b') << 16);
    builder.put("NegativeThickSpace", ((int) '\u200b') << 16);
    builder.put("NegativeThinSpace", ((int) '\u200b') << 16);
    builder.put("NegativeVeryThinSpace", ((int) '\u200b') << 16);
    builder.put("NestedGreaterGreater", ((int) '\u226b') << 16);
    builder.put("NestedLessLess", ((int) '\u226a') << 16);
    builder.put("NewLine", ((int) '\n') << 16);
    builder.put("Nfr", (((int) '\ud835') << 16) | '\udd11');
    builder.put("NoBreak", ((int) '\u2060') << 16);
    builder.put("NonBreakingSpace", ((int) '\u00a0') << 16);
    builder.put("Nopf", ((int) '\u2115') << 16);
    builder.put("Not", ((int) '\u2aec') << 16);
    builder.put("NotCongruent", ((int) '\u2262') << 16);
    builder.put("NotCupCap", ((int) '\u226d') << 16);
    builder.put("NotDoubleVerticalBar", ((int) '\u2226') << 16);
    builder.put("NotElement", ((int) '\u2209') << 16);
    builder.put("NotEqual", ((int) '\u2260') << 16);
    builder.put("NotEqualTilde", (((int) '\u2242') << 16) | '\u0338');
    builder.put("NotExists", ((int) '\u2204') << 16);
    builder.put("NotGreater", ((int) '\u226f') << 16);
    builder.put("NotGreaterEqual", ((int) '\u2271') << 16);
    builder.put("NotGreaterFullEqual", (((int) '\u2267') << 16) | '\u0338');
    builder.put("NotGreaterGreater", (((int) '\u226b') << 16) | '\u0338');
    builder.put("NotGreaterLess", ((int) '\u2279') << 16);
    builder.put("NotGreaterSlantEqual", (((int) '\u2a7e') << 16) | '\u0338');
    builder.put("NotGreaterTilde", ((int) '\u2275') << 16);
    builder.put("NotHumpDownHump", (((int) '\u224e') << 16) | '\u0338');
    builder.put("NotHumpEqual", (((int) '\u224f') << 16) | '\u0338');
    builder.put("NotLeftTriangle", ((int) '\u22ea') << 16);
    builder.put("NotLeftTriangleBar", (((int) '\u29cf') << 16) | '\u0338');
    builder.put("NotLeftTriangleEqual", ((int) '\u22ec') << 16);
    builder.put("NotLess", ((int) '\u226e') << 16);
    builder.put("NotLessEqual", ((int) '\u2270') << 16);
    builder.put("NotLessGreater", ((int) '\u2278') << 16);
    builder.put("NotLessLess", (((int) '\u226a') << 16) | '\u0338');
    builder.put("NotLessSlantEqual", (((int) '\u2a7d') << 16) | '\u0338');
    builder.put("NotLessTilde", ((int) '\u2274') << 16);
    builder.put("NotNestedGreaterGreater", (((int) '\u2aa2') << 16) | '\u0338');
    builder.put("NotNestedLessLess", (((int) '\u2aa1') << 16) | '\u0338');
    builder.put("NotPrecedes", ((int) '\u2280') << 16);
    builder.put("NotPrecedesEqual", (((int) '\u2aaf') << 16) | '\u0338');
    builder.put("NotPrecedesSlantEqual", ((int) '\u22e0') << 16);
    builder.put("NotReverseElement", ((int) '\u220c') << 16);
    builder.put("NotRightTriangle", ((int) '\u22eb') << 16);
    builder.put("NotRightTriangleBar", (((int) '\u29d0') << 16) | '\u0338');
    builder.put("NotRightTriangleEqual", ((int) '\u22ed') << 16);
    builder.put("NotSquareSubset", (((int) '\u228f') << 16) | '\u0338');
    builder.put("NotSquareSubsetEqual", ((int) '\u22e2') << 16);
    builder.put("NotSquareSuperset", (((int) '\u2290') << 16) | '\u0338');
    builder.put("NotSquareSupersetEqual", ((int) '\u22e3') << 16);
    builder.put("NotSubset", (((int) '\u2282') << 16) | '\u20d2');
    builder.put("NotSubsetEqual", ((int) '\u2288') << 16);
    builder.put("NotSucceeds", ((int) '\u2281') << 16);
    builder.put("NotSucceedsEqual", (((int) '\u2ab0') << 16) | '\u0338');
    builder.put("NotSucceedsSlantEqual", ((int) '\u22e1') << 16);
    builder.put("NotSucceedsTilde", (((int) '\u227f') << 16) | '\u0338');
    builder.put("NotSuperset", (((int) '\u2283') << 16) | '\u20d2');
    builder.put("NotSupersetEqual", ((int) '\u2289') << 16);
    builder.put("NotTilde", ((int) '\u2241') << 16);
    builder.put("NotTildeEqual", ((int) '\u2244') << 16);
    builder.put("NotTildeFullEqual", ((int) '\u2247') << 16);
    builder.put("NotTildeTilde", ((int) '\u2249') << 16);
    builder.put("NotVerticalBar", ((int) '\u2224') << 16);
    builder.put("Nscr", (((int) '\ud835') << 16) | '\udca9');
    builder.put("Ntilde", ((int) '\u00d1') << 16);
    builder.put("Nu", ((int) '\u039d') << 16);
    builder.put("OElig", ((int) '\u0152') << 16);
    builder.put("Oacute", ((int) '\u00d3') << 16);
    builder.put("Ocirc", ((int) '\u00d4') << 16);
    builder.put("Ocy", ((int) '\u041e') << 16);
    builder.put("Odblac", ((int) '\u0150') << 16);
    builder.put("Ofr", (((int) '\ud835') << 16) | '\udd12');
    builder.put("Ograve", ((int) '\u00d2') << 16);
    builder.put("Omacr", ((int) '\u014c') << 16);
    builder.put("Omega", ((int) '\u03a9') << 16);
    builder.put("Omicron", ((int) '\u039f') << 16);
    builder.put("Oopf", (((int) '\ud835') << 16) | '\udd46');
    builder.put("OpenCurlyDoubleQuote", ((int) '\u201c') << 16);
    builder.put("OpenCurlyQuote", ((int) '\u2018') << 16);
    builder.put("Or", ((int) '\u2a54') << 16);
    builder.put("Oscr", (((int) '\ud835') << 16) | '\udcaa');
    builder.put("Oslash", ((int) '\u00d8') << 16);
    builder.put("Otilde", ((int) '\u00d5') << 16);
    builder.put("Otimes", ((int) '\u2a37') << 16);
    builder.put("Ouml", ((int) '\u00d6') << 16);
    builder.put("OverBar", ((int) '\u203e') << 16);
    builder.put("OverBrace", ((int) '\u23de') << 16);
    builder.put("OverBracket", ((int) '\u23b4') << 16);
    builder.put("OverParenthesis", ((int) '\u23dc') << 16);
    builder.put("PartialD", ((int) '\u2202') << 16);
    builder.put("Pcy", ((int) '\u041f') << 16);
    builder.put("Pfr", (((int) '\ud835') << 16) | '\udd13');
    builder.put("Phi", ((int) '\u03a6') << 16);
    builder.put("Pi", ((int) '\u03a0') << 16);
    builder.put("PlusMinus", ((int) '\u00b1') << 16);
    builder.put("Poincareplane", ((int) '\u210c') << 16);
    builder.put("Popf", ((int) '\u2119') << 16);
    builder.put("Pr", ((int) '\u2abb') << 16);
    builder.put("Precedes", ((int) '\u227a') << 16);
    builder.put("PrecedesEqual", ((int) '\u2aaf') << 16);
    builder.put("PrecedesSlantEqual", ((int) '\u227c') << 16);
    builder.put("PrecedesTilde", ((int) '\u227e') << 16);
    builder.put("Prime", ((int) '\u2033') << 16);
    builder.put("Product", ((int) '\u220f') << 16);
    builder.put("Proportion", ((int) '\u2237') << 16);
    builder.put("Proportional", ((int) '\u221d') << 16);
    builder.put("Pscr", (((int) '\ud835') << 16) | '\udcab');
    builder.put("Psi", ((int) '\u03a8') << 16);
    builder.put("QUOT", ((int) '\u0022') << 16);
    builder.put("Qfr", (((int) '\ud835') << 16) | '\udd14');
    builder.put("Qopf", ((int) '\u211a') << 16);
    builder.put("Qscr", (((int) '\ud835') << 16) | '\udcac');
    builder.put("RBarr", ((int) '\u2910') << 16);
    builder.put("REG", ((int) '\u00ae') << 16);
    builder.put("Racute", ((int) '\u0154') << 16);
    builder.put("Rang", ((int) '\u27eb') << 16);
    builder.put("Rarr", ((int) '\u21a0') << 16);
    builder.put("Rarrtl", ((int) '\u2916') << 16);
    builder.put("Rcaron", ((int) '\u0158') << 16);
    builder.put("Rcedil", ((int) '\u0156') << 16);
    builder.put("Rcy", ((int) '\u0420') << 16);
    builder.put("Re", ((int) '\u211c') << 16);
    builder.put("ReverseElement", ((int) '\u220b') << 16);
    builder.put("ReverseEquilibrium", ((int) '\u21cb') << 16);
    builder.put("ReverseUpEquilibrium", ((int) '\u296f') << 16);
    builder.put("Rfr", ((int) '\u211c') << 16);
    builder.put("Rho", ((int) '\u03a1') << 16);
    builder.put("RightAngleBracket", ((int) '\u27e9') << 16);
    builder.put("RightArrow", ((int) '\u2192') << 16);
    builder.put("RightArrowBar", ((int) '\u21e5') << 16);
    builder.put("RightArrowLeftArrow", ((int) '\u21c4') << 16);
    builder.put("RightCeiling", ((int) '\u2309') << 16);
    builder.put("RightDoubleBracket", ((int) '\u27e7') << 16);
    builder.put("RightDownTeeVector", ((int) '\u295d') << 16);
    builder.put("RightDownVector", ((int) '\u21c2') << 16);
    builder.put("RightDownVectorBar", ((int) '\u2955') << 16);
    builder.put("RightFloor", ((int) '\u230b') << 16);
    builder.put("RightTee", ((int) '\u22a2') << 16);
    builder.put("RightTeeArrow", ((int) '\u21a6') << 16);
    builder.put("RightTeeVector", ((int) '\u295b') << 16);
    builder.put("RightTriangle", ((int) '\u22b3') << 16);
    builder.put("RightTriangleBar", ((int) '\u29d0') << 16);
    builder.put("RightTriangleEqual", ((int) '\u22b5') << 16);
    builder.put("RightUpDownVector", ((int) '\u294f') << 16);
    builder.put("RightUpTeeVector", ((int) '\u295c') << 16);
    builder.put("RightUpVector", ((int) '\u21be') << 16);
    builder.put("RightUpVectorBar", ((int) '\u2954') << 16);
    builder.put("RightVector", ((int) '\u21c0') << 16);
    builder.put("RightVectorBar", ((int) '\u2953') << 16);
    builder.put("Rightarrow", ((int) '\u21d2') << 16);
    builder.put("Ropf", ((int) '\u211d') << 16);
    builder.put("RoundImplies", ((int) '\u2970') << 16);
    builder.put("Rrightarrow", ((int) '\u21db') << 16);
    builder.put("Rscr", ((int) '\u211b') << 16);
    builder.put("Rsh", ((int) '\u21b1') << 16);
    builder.put("RuleDelayed", ((int) '\u29f4') << 16);
    builder.put("SHCHcy", ((int) '\u0429') << 16);
    builder.put("SHcy", ((int) '\u0428') << 16);
    builder.put("SOFTcy", ((int) '\u042c') << 16);
    builder.put("Sacute", ((int) '\u015a') << 16);
    builder.put("Sc", ((int) '\u2abc') << 16);
    builder.put("Scaron", ((int) '\u0160') << 16);
    builder.put("Scedil", ((int) '\u015e') << 16);
    builder.put("Scirc", ((int) '\u015c') << 16);
    builder.put("Scy", ((int) '\u0421') << 16);
    builder.put("Sfr", (((int) '\ud835') << 16) | '\udd16');
    builder.put("ShortDownArrow", ((int) '\u2193') << 16);
    builder.put("ShortLeftArrow", ((int) '\u2190') << 16);
    builder.put("ShortRightArrow", ((int) '\u2192') << 16);
    builder.put("ShortUpArrow", ((int) '\u2191') << 16);
    builder.put("Sigma", ((int) '\u03a3') << 16);
    builder.put("SmallCircle", ((int) '\u2218') << 16);
    builder.put("Sopf", (((int) '\ud835') << 16) | '\udd4a');
    builder.put("Sqrt", ((int) '\u221a') << 16);
    builder.put("Square", ((int) '\u25a1') << 16);
    builder.put("SquareIntersection", ((int) '\u2293') << 16);
    builder.put("SquareSubset", ((int) '\u228f') << 16);
    builder.put("SquareSubsetEqual", ((int) '\u2291') << 16);
    builder.put("SquareSuperset", ((int) '\u2290') << 16);
    builder.put("SquareSupersetEqual", ((int) '\u2292') << 16);
    builder.put("SquareUnion", ((int) '\u2294') << 16);
    builder.put("Sscr", (((int) '\ud835') << 16) | '\udcae');
    builder.put("Star", ((int) '\u22c6') << 16);
    builder.put("Sub", ((int) '\u22d0') << 16);
    builder.put("Subset", ((int) '\u22d0') << 16);
    builder.put("SubsetEqual", ((int) '\u2286') << 16);
    builder.put("Succeeds", ((int) '\u227b') << 16);
    builder.put("SucceedsEqual", ((int) '\u2ab0') << 16);
    builder.put("SucceedsSlantEqual", ((int) '\u227d') << 16);
    builder.put("SucceedsTilde", ((int) '\u227f') << 16);
    builder.put("SuchThat", ((int) '\u220b') << 16);
    builder.put("Sum", ((int) '\u2211') << 16);
    builder.put("Sup", ((int) '\u22d1') << 16);
    builder.put("Superset", ((int) '\u2283') << 16);
    builder.put("SupersetEqual", ((int) '\u2287') << 16);
    builder.put("Supset", ((int) '\u22d1') << 16);
    builder.put("THORN", ((int) '\u00de') << 16);
    builder.put("TRADE", ((int) '\u2122') << 16);
    builder.put("TSHcy", ((int) '\u040b') << 16);
    builder.put("TScy", ((int) '\u0426') << 16);
    builder.put("Tab", ((int) '\u0009') << 16);
    builder.put("Tau", ((int) '\u03a4') << 16);
    builder.put("Tcaron", ((int) '\u0164') << 16);
    builder.put("Tcedil", ((int) '\u0162') << 16);
    builder.put("Tcy", ((int) '\u0422') << 16);
    builder.put("Tfr", (((int) '\ud835') << 16) | '\udd17');
    builder.put("Therefore", ((int) '\u2234') << 16);
    builder.put("Theta", ((int) '\u0398') << 16);
    builder.put("ThickSpace", (((int) '\u205f') << 16) | '\u200a');
    builder.put("ThinSpace", ((int) '\u2009') << 16);
    builder.put("Tilde", ((int) '\u223c') << 16);
    builder.put("TildeEqual", ((int) '\u2243') << 16);
    builder.put("TildeFullEqual", ((int) '\u2245') << 16);
    builder.put("TildeTilde", ((int) '\u2248') << 16);
    builder.put("Topf", (((int) '\ud835') << 16) | '\udd4b');
    builder.put("TripleDot", ((int) '\u20db') << 16);
    builder.put("Tscr", (((int) '\ud835') << 16) | '\udcaf');
    builder.put("Tstrok", ((int) '\u0166') << 16);
    builder.put("Uacute", ((int) '\u00da') << 16);
    builder.put("Uarr", ((int) '\u219f') << 16);
    builder.put("Uarrocir", ((int) '\u2949') << 16);
    builder.put("Ubrcy", ((int) '\u040e') << 16);
    builder.put("Ubreve", ((int) '\u016c') << 16);
    builder.put("Ucirc", ((int) '\u00db') << 16);
    builder.put("Ucy", ((int) '\u0423') << 16);
    builder.put("Udblac", ((int) '\u0170') << 16);
    builder.put("Ufr", (((int) '\ud835') << 16) | '\udd18');
    builder.put("Ugrave", ((int) '\u00d9') << 16);
    builder.put("Umacr", ((int) '\u016a') << 16);
    builder.put("UnderBar", ((int) '\u005f') << 16);
    builder.put("UnderBrace", ((int) '\u23df') << 16);
    builder.put("UnderBracket", ((int) '\u23b5') << 16);
    builder.put("UnderParenthesis", ((int) '\u23dd') << 16);
    builder.put("Union", ((int) '\u22c3') << 16);
    builder.put("UnionPlus", ((int) '\u228e') << 16);
    builder.put("Uogon", ((int) '\u0172') << 16);
    builder.put("Uopf", (((int) '\ud835') << 16) | '\udd4c');
    builder.put("UpArrow", ((int) '\u2191') << 16);
    builder.put("UpArrowBar", ((int) '\u2912') << 16);
    builder.put("UpArrowDownArrow", ((int) '\u21c5') << 16);
    builder.put("UpDownArrow", ((int) '\u2195') << 16);
    builder.put("UpEquilibrium", ((int) '\u296e') << 16);
    builder.put("UpTee", ((int) '\u22a5') << 16);
    builder.put("UpTeeArrow", ((int) '\u21a5') << 16);
    builder.put("Uparrow", ((int) '\u21d1') << 16);
    builder.put("Updownarrow", ((int) '\u21d5') << 16);
    builder.put("UpperLeftArrow", ((int) '\u2196') << 16);
    builder.put("UpperRightArrow", ((int) '\u2197') << 16);
    builder.put("Upsi", ((int) '\u03d2') << 16);
    builder.put("Upsilon", ((int) '\u03a5') << 16);
    builder.put("Uring", ((int) '\u016e') << 16);
    builder.put("Uscr", (((int) '\ud835') << 16) | '\udcb0');
    builder.put("Utilde", ((int) '\u0168') << 16);
    builder.put("Uuml", ((int) '\u00dc') << 16);
    builder.put("VDash", ((int) '\u22ab') << 16);
    builder.put("Vbar", ((int) '\u2aeb') << 16);
    builder.put("Vcy", ((int) '\u0412') << 16);
    builder.put("Vdash", ((int) '\u22a9') << 16);
    builder.put("Vdashl", ((int) '\u2ae6') << 16);
    builder.put("Vee", ((int) '\u22c1') << 16);
    builder.put("Verbar", ((int) '\u2016') << 16);
    builder.put("Vert", ((int) '\u2016') << 16);
    builder.put("VerticalBar", ((int) '\u2223') << 16);
    builder.put("VerticalLine", ((int) '\u007c') << 16);
    builder.put("VerticalSeparator", ((int) '\u2758') << 16);
    builder.put("VerticalTilde", ((int) '\u2240') << 16);
    builder.put("VeryThinSpace", ((int) '\u200a') << 16);
    builder.put("Vfr", (((int) '\ud835') << 16) | '\udd19');
    builder.put("Vopf", (((int) '\ud835') << 16) | '\udd4d');
    builder.put("Vscr", (((int) '\ud835') << 16) | '\udcb1');
    builder.put("Vvdash", ((int) '\u22aa') << 16);
    builder.put("Wcirc", ((int) '\u0174') << 16);
    builder.put("Wedge", ((int) '\u22c0') << 16);
    builder.put("Wfr", (((int) '\ud835') << 16) | '\udd1a');
    builder.put("Wopf", (((int) '\ud835') << 16) | '\udd4e');
    builder.put("Wscr", (((int) '\ud835') << 16) | '\udcb2');
    builder.put("Xfr", (((int) '\ud835') << 16) | '\udd1b');
    builder.put("Xi", ((int) '\u039e') << 16);
    builder.put("Xopf", (((int) '\ud835') << 16) | '\udd4f');
    builder.put("Xscr", (((int) '\ud835') << 16) | '\udcb3');
    builder.put("YAcy", ((int) '\u042f') << 16);
    builder.put("YIcy", ((int) '\u0407') << 16);
    builder.put("YUcy", ((int) '\u042e') << 16);
    builder.put("Yacute", ((int) '\u00dd') << 16);
    builder.put("Ycirc", ((int) '\u0176') << 16);
    builder.put("Ycy", ((int) '\u042b') << 16);
    builder.put("Yfr", (((int) '\ud835') << 16) | '\udd1c');
    builder.put("Yopf", (((int) '\ud835') << 16) | '\udd50');
    builder.put("Yscr", (((int) '\ud835') << 16) | '\udcb4');
    builder.put("Yuml", ((int) '\u0178') << 16);
    builder.put("ZHcy", ((int) '\u0416') << 16);
    builder.put("Zacute", ((int) '\u0179') << 16);
    builder.put("Zcaron", ((int) '\u017d') << 16);
    builder.put("Zcy", ((int) '\u0417') << 16);
    builder.put("Zdot", ((int) '\u017b') << 16);
    builder.put("ZeroWidthSpace", ((int) '\u200b') << 16);
    builder.put("Zeta", ((int) '\u0396') << 16);
    builder.put("Zfr", ((int) '\u2128') << 16);
    builder.put("Zopf", ((int) '\u2124') << 16);
    builder.put("Zscr", (((int) '\ud835') << 16) | '\udcb5');
    builder.put("aacute", ((int) '\u00e1') << 16);
    builder.put("abreve", ((int) '\u0103') << 16);
    builder.put("ac", ((int) '\u223e') << 16);
    builder.put("acE", (((int) '\u223e') << 16) | '\u0333');
    builder.put("acd", ((int) '\u223f') << 16);
    builder.put("acirc", ((int) '\u00e2') << 16);
    builder.put("acute", ((int) '\u00b4') << 16);
    builder.put("acy", ((int) '\u0430') << 16);
    builder.put("aelig", ((int) '\u00e6') << 16);
    builder.put("af", ((int) '\u2061') << 16);
    builder.put("afr", (((int) '\ud835') << 16) | '\udd1e');
    builder.put("agrave", ((int) '\u00e0') << 16);
    builder.put("alefsym", ((int) '\u2135') << 16);
    builder.put("aleph", ((int) '\u2135') << 16);
    builder.put("alpha", ((int) '\u03b1') << 16);
    builder.put("amacr", ((int) '\u0101') << 16);
    builder.put("amalg", ((int) '\u2a3f') << 16);
    builder.put("amp", ((int) '\u0026') << 16);
    builder.put("and", ((int) '\u2227') << 16);
    builder.put("andand", ((int) '\u2a55') << 16);
    builder.put("andd", ((int) '\u2a5c') << 16);
    builder.put("andslope", ((int) '\u2a58') << 16);
    builder.put("andv", ((int) '\u2a5a') << 16);
    builder.put("ang", ((int) '\u2220') << 16);
    builder.put("ange", ((int) '\u29a4') << 16);
    builder.put("angle", ((int) '\u2220') << 16);
    builder.put("angmsd", ((int) '\u2221') << 16);
    builder.put("angmsdaa", ((int) '\u29a8') << 16);
    builder.put("angmsdab", ((int) '\u29a9') << 16);
    builder.put("angmsdac", ((int) '\u29aa') << 16);
    builder.put("angmsdad", ((int) '\u29ab') << 16);
    builder.put("angmsdae", ((int) '\u29ac') << 16);
    builder.put("angmsdaf", ((int) '\u29ad') << 16);
    builder.put("angmsdag", ((int) '\u29ae') << 16);
    builder.put("angmsdah", ((int) '\u29af') << 16);
    builder.put("angrt", ((int) '\u221f') << 16);
    builder.put("angrtvb", ((int) '\u22be') << 16);
    builder.put("angrtvbd", ((int) '\u299d') << 16);
    builder.put("angsph", ((int) '\u2222') << 16);
    builder.put("angst", ((int) '\u00c5') << 16);
    builder.put("angzarr", ((int) '\u237c') << 16);
    builder.put("aogon", ((int) '\u0105') << 16);
    builder.put("aopf", (((int) '\ud835') << 16) | '\udd52');
    builder.put("ap", ((int) '\u2248') << 16);
    builder.put("apE", ((int) '\u2a70') << 16);
    builder.put("apacir", ((int) '\u2a6f') << 16);
    builder.put("ape", ((int) '\u224a') << 16);
    builder.put("apid", ((int) '\u224b') << 16);
    builder.put("apos", ((int) '\'') << 16);
    builder.put("approx", ((int) '\u2248') << 16);
    builder.put("approxeq", ((int) '\u224a') << 16);
    builder.put("aring", ((int) '\u00e5') << 16);
    builder.put("ascr", (((int) '\ud835') << 16) | '\udcb6');
    builder.put("ast", ((int) '\u002a') << 16);
    builder.put("asymp", ((int) '\u2248') << 16);
    builder.put("asympeq", ((int) '\u224d') << 16);
    builder.put("atilde", ((int) '\u00e3') << 16);
    builder.put("auml", ((int) '\u00e4') << 16);
    builder.put("awconint", ((int) '\u2233') << 16);
    builder.put("awint", ((int) '\u2a11') << 16);
    builder.put("bNot", ((int) '\u2aed') << 16);
    builder.put("backcong", ((int) '\u224c') << 16);
    builder.put("backepsilon", ((int) '\u03f6') << 16);
    builder.put("backprime", ((int) '\u2035') << 16);
    builder.put("backsim", ((int) '\u223d') << 16);
    builder.put("backsimeq", ((int) '\u22cd') << 16);
    builder.put("barvee", ((int) '\u22bd') << 16);
    builder.put("barwed", ((int) '\u2305') << 16);
    builder.put("barwedge", ((int) '\u2305') << 16);
    builder.put("bbrk", ((int) '\u23b5') << 16);
    builder.put("bbrktbrk", ((int) '\u23b6') << 16);
    builder.put("bcong", ((int) '\u224c') << 16);
    builder.put("bcy", ((int) '\u0431') << 16);
    builder.put("bdquo", ((int) '\u201e') << 16);
    builder.put("becaus", ((int) '\u2235') << 16);
    builder.put("because", ((int) '\u2235') << 16);
    builder.put("bemptyv", ((int) '\u29b0') << 16);
    builder.put("bepsi", ((int) '\u03f6') << 16);
    builder.put("bernou", ((int) '\u212c') << 16);
    builder.put("beta", ((int) '\u03b2') << 16);
    builder.put("beth", ((int) '\u2136') << 16);
    builder.put("between", ((int) '\u226c') << 16);
    builder.put("bfr", (((int) '\ud835') << 16) | '\udd1f');
    builder.put("bigcap", ((int) '\u22c2') << 16);
    builder.put("bigcirc", ((int) '\u25ef') << 16);
    builder.put("bigcup", ((int) '\u22c3') << 16);
    builder.put("bigodot", ((int) '\u2a00') << 16);
    builder.put("bigoplus", ((int) '\u2a01') << 16);
    builder.put("bigotimes", ((int) '\u2a02') << 16);
    builder.put("bigsqcup", ((int) '\u2a06') << 16);
    builder.put("bigstar", ((int) '\u2605') << 16);
    builder.put("bigtriangledown", ((int) '\u25bd') << 16);
    builder.put("bigtriangleup", ((int) '\u25b3') << 16);
    builder.put("biguplus", ((int) '\u2a04') << 16);
    builder.put("bigvee", ((int) '\u22c1') << 16);
    builder.put("bigwedge", ((int) '\u22c0') << 16);
    builder.put("bkarow", ((int) '\u290d') << 16);
    builder.put("blacklozenge", ((int) '\u29eb') << 16);
    builder.put("blacksquare", ((int) '\u25aa') << 16);
    builder.put("blacktriangle", ((int) '\u25b4') << 16);
    builder.put("blacktriangledown", ((int) '\u25be') << 16);
    builder.put("blacktriangleleft", ((int) '\u25c2') << 16);
    builder.put("blacktriangleright", ((int) '\u25b8') << 16);
    builder.put("blank", ((int) '\u2423') << 16);
    builder.put("blk12", ((int) '\u2592') << 16);
    builder.put("blk14", ((int) '\u2591') << 16);
    builder.put("blk34", ((int) '\u2593') << 16);
    builder.put("block", ((int) '\u2588') << 16);
    builder.put("bne", (((int) '\u003d') << 16) | '\u20e5');
    builder.put("bnequiv", (((int) '\u2261') << 16) | '\u20e5');
    builder.put("bnot", ((int) '\u2310') << 16);
    builder.put("bopf", (((int) '\ud835') << 16) | '\udd53');
    builder.put("bot", ((int) '\u22a5') << 16);
    builder.put("bottom", ((int) '\u22a5') << 16);
    builder.put("bowtie", ((int) '\u22c8') << 16);
    builder.put("boxDL", ((int) '\u2557') << 16);
    builder.put("boxDR", ((int) '\u2554') << 16);
    builder.put("boxDl", ((int) '\u2556') << 16);
    builder.put("boxDr", ((int) '\u2553') << 16);
    builder.put("boxH", ((int) '\u2550') << 16);
    builder.put("boxHD", ((int) '\u2566') << 16);
    builder.put("boxHU", ((int) '\u2569') << 16);
    builder.put("boxHd", ((int) '\u2564') << 16);
    builder.put("boxHu", ((int) '\u2567') << 16);
    builder.put("boxUL", ((int) '\u255d') << 16);
    builder.put("boxUR", ((int) '\u255a') << 16);
    builder.put("boxUl", ((int) '\u255c') << 16);
    builder.put("boxUr", ((int) '\u2559') << 16);
    builder.put("boxV", ((int) '\u2551') << 16);
    builder.put("boxVH", ((int) '\u256c') << 16);
    builder.put("boxVL", ((int) '\u2563') << 16);
    builder.put("boxVR", ((int) '\u2560') << 16);
    builder.put("boxVh", ((int) '\u256b') << 16);
    builder.put("boxVl", ((int) '\u2562') << 16);
    builder.put("boxVr", ((int) '\u255f') << 16);
    builder.put("boxbox", ((int) '\u29c9') << 16);
    builder.put("boxdL", ((int) '\u2555') << 16);
    builder.put("boxdR", ((int) '\u2552') << 16);
    builder.put("boxdl", ((int) '\u2510') << 16);
    builder.put("boxdr", ((int) '\u250c') << 16);
    builder.put("boxh", ((int) '\u2500') << 16);
    builder.put("boxhD", ((int) '\u2565') << 16);
    builder.put("boxhU", ((int) '\u2568') << 16);
    builder.put("boxhd", ((int) '\u252c') << 16);
    builder.put("boxhu", ((int) '\u2534') << 16);
    builder.put("boxminus", ((int) '\u229f') << 16);
    builder.put("boxplus", ((int) '\u229e') << 16);
    builder.put("boxtimes", ((int) '\u22a0') << 16);
    builder.put("boxuL", ((int) '\u255b') << 16);
    builder.put("boxuR", ((int) '\u2558') << 16);
    builder.put("boxul", ((int) '\u2518') << 16);
    builder.put("boxur", ((int) '\u2514') << 16);
    builder.put("boxv", ((int) '\u2502') << 16);
    builder.put("boxvH", ((int) '\u256a') << 16);
    builder.put("boxvL", ((int) '\u2561') << 16);
    builder.put("boxvR", ((int) '\u255e') << 16);
    builder.put("boxvh", ((int) '\u253c') << 16);
    builder.put("boxvl", ((int) '\u2524') << 16);
    builder.put("boxvr", ((int) '\u251c') << 16);
    builder.put("bprime", ((int) '\u2035') << 16);
    builder.put("breve", ((int) '\u02d8') << 16);
    builder.put("brvbar", ((int) '\u00a6') << 16);
    builder.put("bscr", (((int) '\ud835') << 16) | '\udcb7');
    builder.put("bsemi", ((int) '\u204f') << 16);
    builder.put("bsim", ((int) '\u223d') << 16);
    builder.put("bsime", ((int) '\u22cd') << 16);
    builder.put("bsol", ((int) '\\') << 16);
    builder.put("bsolb", ((int) '\u29c5') << 16);
    builder.put("bsolhsub", ((int) '\u27c8') << 16);
    builder.put("bull", ((int) '\u2022') << 16);
    builder.put("bullet", ((int) '\u2022') << 16);
    builder.put("bump", ((int) '\u224e') << 16);
    builder.put("bumpE", ((int) '\u2aae') << 16);
    builder.put("bumpe", ((int) '\u224f') << 16);
    builder.put("bumpeq", ((int) '\u224f') << 16);
    builder.put("cacute", ((int) '\u0107') << 16);
    builder.put("cap", ((int) '\u2229') << 16);
    builder.put("capand", ((int) '\u2a44') << 16);
    builder.put("capbrcup", ((int) '\u2a49') << 16);
    builder.put("capcap", ((int) '\u2a4b') << 16);
    builder.put("capcup", ((int) '\u2a47') << 16);
    builder.put("capdot", ((int) '\u2a40') << 16);
    builder.put("caps", (((int) '\u2229') << 16) | '\ufe00');
    builder.put("caret", ((int) '\u2041') << 16);
    builder.put("caron", ((int) '\u02c7') << 16);
    builder.put("ccaps", ((int) '\u2a4d') << 16);
    builder.put("ccaron", ((int) '\u010d') << 16);
    builder.put("ccedil", ((int) '\u00e7') << 16);
    builder.put("ccirc", ((int) '\u0109') << 16);
    builder.put("ccups", ((int) '\u2a4c') << 16);
    builder.put("ccupssm", ((int) '\u2a50') << 16);
    builder.put("cdot", ((int) '\u010b') << 16);
    builder.put("cedil", ((int) '\u00b8') << 16);
    builder.put("cemptyv", ((int) '\u29b2') << 16);
    builder.put("cent", ((int) '\u00a2') << 16);
    builder.put("centerdot", ((int) '\u00b7') << 16);
    builder.put("cfr", (((int) '\ud835') << 16) | '\udd20');
    builder.put("chcy", ((int) '\u0447') << 16);
    builder.put("check", ((int) '\u2713') << 16);
    builder.put("checkmark", ((int) '\u2713') << 16);
    builder.put("chi", ((int) '\u03c7') << 16);
    builder.put("cir", ((int) '\u25cb') << 16);
    builder.put("cirE", ((int) '\u29c3') << 16);
    builder.put("circ", ((int) '\u02c6') << 16);
    builder.put("circeq", ((int) '\u2257') << 16);
    builder.put("circlearrowleft", ((int) '\u21ba') << 16);
    builder.put("circlearrowright", ((int) '\u21bb') << 16);
    builder.put("circledR", ((int) '\u00ae') << 16);
    builder.put("circledS", ((int) '\u24c8') << 16);
    builder.put("circledast", ((int) '\u229b') << 16);
    builder.put("circledcirc", ((int) '\u229a') << 16);
    builder.put("circleddash", ((int) '\u229d') << 16);
    builder.put("cire", ((int) '\u2257') << 16);
    builder.put("cirfnint", ((int) '\u2a10') << 16);
    builder.put("cirmid", ((int) '\u2aef') << 16);
    builder.put("cirscir", ((int) '\u29c2') << 16);
    builder.put("clubs", ((int) '\u2663') << 16);
    builder.put("clubsuit", ((int) '\u2663') << 16);
    builder.put("colon", ((int) '\u003a') << 16);
    builder.put("colone", ((int) '\u2254') << 16);
    builder.put("coloneq", ((int) '\u2254') << 16);
    builder.put("comma", ((int) '\u002c') << 16);
    builder.put("commat", ((int) '\u0040') << 16);
    builder.put("comp", ((int) '\u2201') << 16);
    builder.put("compfn", ((int) '\u2218') << 16);
    builder.put("complement", ((int) '\u2201') << 16);
    builder.put("complexes", ((int) '\u2102') << 16);
    builder.put("cong", ((int) '\u2245') << 16);
    builder.put("congdot", ((int) '\u2a6d') << 16);
    builder.put("conint", ((int) '\u222e') << 16);
    builder.put("copf", (((int) '\ud835') << 16) | '\udd54');
    builder.put("coprod", ((int) '\u2210') << 16);
    builder.put("copy", ((int) '\u00a9') << 16);
    builder.put("copysr", ((int) '\u2117') << 16);
    builder.put("crarr", ((int) '\u21b5') << 16);
    builder.put("cross", ((int) '\u2717') << 16);
    builder.put("cscr", (((int) '\ud835') << 16) | '\udcb8');
    builder.put("csub", ((int) '\u2acf') << 16);
    builder.put("csube", ((int) '\u2ad1') << 16);
    builder.put("csup", ((int) '\u2ad0') << 16);
    builder.put("csupe", ((int) '\u2ad2') << 16);
    builder.put("ctdot", ((int) '\u22ef') << 16);
    builder.put("cudarrl", ((int) '\u2938') << 16);
    builder.put("cudarrr", ((int) '\u2935') << 16);
    builder.put("cuepr", ((int) '\u22de') << 16);
    builder.put("cuesc", ((int) '\u22df') << 16);
    builder.put("cularr", ((int) '\u21b6') << 16);
    builder.put("cularrp", ((int) '\u293d') << 16);
    builder.put("cup", ((int) '\u222a') << 16);
    builder.put("cupbrcap", ((int) '\u2a48') << 16);
    builder.put("cupcap", ((int) '\u2a46') << 16);
    builder.put("cupcup", ((int) '\u2a4a') << 16);
    builder.put("cupdot", ((int) '\u228d') << 16);
    builder.put("cupor", ((int) '\u2a45') << 16);
    builder.put("cups", (((int) '\u222a') << 16) | '\ufe00');
    builder.put("curarr", ((int) '\u21b7') << 16);
    builder.put("curarrm", ((int) '\u293c') << 16);
    builder.put("curlyeqprec", ((int) '\u22de') << 16);
    builder.put("curlyeqsucc", ((int) '\u22df') << 16);
    builder.put("curlyvee", ((int) '\u22ce') << 16);
    builder.put("curlywedge", ((int) '\u22cf') << 16);
    builder.put("curren", ((int) '\u00a4') << 16);
    builder.put("curvearrowleft", ((int) '\u21b6') << 16);
    builder.put("curvearrowright", ((int) '\u21b7') << 16);
    builder.put("cuvee", ((int) '\u22ce') << 16);
    builder.put("cuwed", ((int) '\u22cf') << 16);
    builder.put("cwconint", ((int) '\u2232') << 16);
    builder.put("cwint", ((int) '\u2231') << 16);
    builder.put("cylcty", ((int) '\u232d') << 16);
    builder.put("dArr", ((int) '\u21d3') << 16);
    builder.put("dHar", ((int) '\u2965') << 16);
    builder.put("dagger", ((int) '\u2020') << 16);
    builder.put("daleth", ((int) '\u2138') << 16);
    builder.put("darr", ((int) '\u2193') << 16);
    builder.put("dash", ((int) '\u2010') << 16);
    builder.put("dashv", ((int) '\u22a3') << 16);
    builder.put("dbkarow", ((int) '\u290f') << 16);
    builder.put("dblac", ((int) '\u02dd') << 16);
    builder.put("dcaron", ((int) '\u010f') << 16);
    builder.put("dcy", ((int) '\u0434') << 16);
    builder.put("dd", ((int) '\u2146') << 16);
    builder.put("ddagger", ((int) '\u2021') << 16);
    builder.put("ddarr", ((int) '\u21ca') << 16);
    builder.put("ddotseq", ((int) '\u2a77') << 16);
    builder.put("deg", ((int) '\u00b0') << 16);
    builder.put("delta", ((int) '\u03b4') << 16);
    builder.put("demptyv", ((int) '\u29b1') << 16);
    builder.put("dfisht", ((int) '\u297f') << 16);
    builder.put("dfr", (((int) '\ud835') << 16) | '\udd21');
    builder.put("dharl", ((int) '\u21c3') << 16);
    builder.put("dharr", ((int) '\u21c2') << 16);
    builder.put("diam", ((int) '\u22c4') << 16);
    builder.put("diamond", ((int) '\u22c4') << 16);
    builder.put("diamondsuit", ((int) '\u2666') << 16);
    builder.put("diams", ((int) '\u2666') << 16);
    builder.put("die", ((int) '\u00a8') << 16);
    builder.put("digamma", ((int) '\u03dd') << 16);
    builder.put("disin", ((int) '\u22f2') << 16);
    builder.put("div", ((int) '\u00f7') << 16);
    builder.put("divide", ((int) '\u00f7') << 16);
    builder.put("divideontimes", ((int) '\u22c7') << 16);
    builder.put("divonx", ((int) '\u22c7') << 16);
    builder.put("djcy", ((int) '\u0452') << 16);
    builder.put("dlcorn", ((int) '\u231e') << 16);
    builder.put("dlcrop", ((int) '\u230d') << 16);
    builder.put("dollar", ((int) '\u0024') << 16);
    builder.put("dopf", (((int) '\ud835') << 16) | '\udd55');
    builder.put("dot", ((int) '\u02d9') << 16);
    builder.put("doteq", ((int) '\u2250') << 16);
    builder.put("doteqdot", ((int) '\u2251') << 16);
    builder.put("dotminus", ((int) '\u2238') << 16);
    builder.put("dotplus", ((int) '\u2214') << 16);
    builder.put("dotsquare", ((int) '\u22a1') << 16);
    builder.put("doublebarwedge", ((int) '\u2306') << 16);
    builder.put("downarrow", ((int) '\u2193') << 16);
    builder.put("downdownarrows", ((int) '\u21ca') << 16);
    builder.put("downharpoonleft", ((int) '\u21c3') << 16);
    builder.put("downharpoonright", ((int) '\u21c2') << 16);
    builder.put("drbkarow", ((int) '\u2910') << 16);
    builder.put("drcorn", ((int) '\u231f') << 16);
    builder.put("drcrop", ((int) '\u230c') << 16);
    builder.put("dscr", (((int) '\ud835') << 16) | '\udcb9');
    builder.put("dscy", ((int) '\u0455') << 16);
    builder.put("dsol", ((int) '\u29f6') << 16);
    builder.put("dstrok", ((int) '\u0111') << 16);
    builder.put("dtdot", ((int) '\u22f1') << 16);
    builder.put("dtri", ((int) '\u25bf') << 16);
    builder.put("dtrif", ((int) '\u25be') << 16);
    builder.put("duarr", ((int) '\u21f5') << 16);
    builder.put("duhar", ((int) '\u296f') << 16);
    builder.put("dwangle", ((int) '\u29a6') << 16);
    builder.put("dzcy", ((int) '\u045f') << 16);
    builder.put("dzigrarr", ((int) '\u27ff') << 16);
    builder.put("eDDot", ((int) '\u2a77') << 16);
    builder.put("eDot", ((int) '\u2251') << 16);
    builder.put("eacute", ((int) '\u00e9') << 16);
    builder.put("easter", ((int) '\u2a6e') << 16);
    builder.put("ecaron", ((int) '\u011b') << 16);
    builder.put("ecir", ((int) '\u2256') << 16);
    builder.put("ecirc", ((int) '\u00ea') << 16);
    builder.put("ecolon", ((int) '\u2255') << 16);
    builder.put("ecy", ((int) '\u044d') << 16);
    builder.put("edot", ((int) '\u0117') << 16);
    builder.put("ee", ((int) '\u2147') << 16);
    builder.put("efDot", ((int) '\u2252') << 16);
    builder.put("efr", (((int) '\ud835') << 16) | '\udd22');
    builder.put("eg", ((int) '\u2a9a') << 16);
    builder.put("egrave", ((int) '\u00e8') << 16);
    builder.put("egs", ((int) '\u2a96') << 16);
    builder.put("egsdot", ((int) '\u2a98') << 16);
    builder.put("el", ((int) '\u2a99') << 16);
    builder.put("elinters", ((int) '\u23e7') << 16);
    builder.put("ell", ((int) '\u2113') << 16);
    builder.put("els", ((int) '\u2a95') << 16);
    builder.put("elsdot", ((int) '\u2a97') << 16);
    builder.put("emacr", ((int) '\u0113') << 16);
    builder.put("empty", ((int) '\u2205') << 16);
    builder.put("emptyset", ((int) '\u2205') << 16);
    builder.put("emptyv", ((int) '\u2205') << 16);
    builder.put("emsp13", ((int) '\u2004') << 16);
    builder.put("emsp14", ((int) '\u2005') << 16);
    builder.put("emsp", ((int) '\u2003') << 16);
    builder.put("eng", ((int) '\u014b') << 16);
    builder.put("ensp", ((int) '\u2002') << 16);
    builder.put("eogon", ((int) '\u0119') << 16);
    builder.put("eopf", (((int) '\ud835') << 16) | '\udd56');
    builder.put("epar", ((int) '\u22d5') << 16);
    builder.put("eparsl", ((int) '\u29e3') << 16);
    builder.put("eplus", ((int) '\u2a71') << 16);
    builder.put("epsi", ((int) '\u03b5') << 16);
    builder.put("epsilon", ((int) '\u03b5') << 16);
    builder.put("epsiv", ((int) '\u03f5') << 16);
    builder.put("eqcirc", ((int) '\u2256') << 16);
    builder.put("eqcolon", ((int) '\u2255') << 16);
    builder.put("eqsim", ((int) '\u2242') << 16);
    builder.put("eqslantgtr", ((int) '\u2a96') << 16);
    builder.put("eqslantless", ((int) '\u2a95') << 16);
    builder.put("equals", ((int) '\u003d') << 16);
    builder.put("equest", ((int) '\u225f') << 16);
    builder.put("equiv", ((int) '\u2261') << 16);
    builder.put("equivDD", ((int) '\u2a78') << 16);
    builder.put("eqvparsl", ((int) '\u29e5') << 16);
    builder.put("erDot", ((int) '\u2253') << 16);
    builder.put("erarr", ((int) '\u2971') << 16);
    builder.put("escr", ((int) '\u212f') << 16);
    builder.put("esdot", ((int) '\u2250') << 16);
    builder.put("esim", ((int) '\u2242') << 16);
    builder.put("eta", ((int) '\u03b7') << 16);
    builder.put("eth", ((int) '\u00f0') << 16);
    builder.put("euml", ((int) '\u00eb') << 16);
    builder.put("euro", ((int) '\u20ac') << 16);
    builder.put("excl", ((int) '\u0021') << 16);
    builder.put("exist", ((int) '\u2203') << 16);
    builder.put("expectation", ((int) '\u2130') << 16);
    builder.put("exponentiale", ((int) '\u2147') << 16);
    builder.put("fallingdotseq", ((int) '\u2252') << 16);
    builder.put("fcy", ((int) '\u0444') << 16);
    builder.put("female", ((int) '\u2640') << 16);
    builder.put("ffilig", ((int) '\ufb03') << 16);
    builder.put("fflig", ((int) '\ufb00') << 16);
    builder.put("ffllig", ((int) '\ufb04') << 16);
    builder.put("ffr", (((int) '\ud835') << 16) | '\udd23');
    builder.put("filig", ((int) '\ufb01') << 16);
    builder.put("fjlig", (((int) '\u0066') << 16) | '\u006a');
    builder.put("flat", ((int) '\u266d') << 16);
    builder.put("fllig", ((int) '\ufb02') << 16);
    builder.put("fltns", ((int) '\u25b1') << 16);
    builder.put("fnof", ((int) '\u0192') << 16);
    builder.put("fopf", (((int) '\ud835') << 16) | '\udd57');
    builder.put("forall", ((int) '\u2200') << 16);
    builder.put("fork", ((int) '\u22d4') << 16);
    builder.put("forkv", ((int) '\u2ad9') << 16);
    builder.put("fpartint", ((int) '\u2a0d') << 16);
    builder.put("frac12", ((int) '\u00bd') << 16);
    builder.put("frac13", ((int) '\u2153') << 16);
    builder.put("frac14", ((int) '\u00bc') << 16);
    builder.put("frac15", ((int) '\u2155') << 16);
    builder.put("frac16", ((int) '\u2159') << 16);
    builder.put("frac18", ((int) '\u215b') << 16);
    builder.put("frac23", ((int) '\u2154') << 16);
    builder.put("frac25", ((int) '\u2156') << 16);
    builder.put("frac34", ((int) '\u00be') << 16);
    builder.put("frac35", ((int) '\u2157') << 16);
    builder.put("frac38", ((int) '\u215c') << 16);
    builder.put("frac45", ((int) '\u2158') << 16);
    builder.put("frac56", ((int) '\u215a') << 16);
    builder.put("frac58", ((int) '\u215d') << 16);
    builder.put("frac78", ((int) '\u215e') << 16);
    builder.put("frasl", ((int) '\u2044') << 16);
    builder.put("frown", ((int) '\u2322') << 16);
    builder.put("fscr", (((int) '\ud835') << 16) | '\udcbb');
    builder.put("gE", ((int) '\u2267') << 16);
    builder.put("gEl", ((int) '\u2a8c') << 16);
    builder.put("gacute", ((int) '\u01f5') << 16);
    builder.put("gamma", ((int) '\u03b3') << 16);
    builder.put("gammad", ((int) '\u03dd') << 16);
    builder.put("gap", ((int) '\u2a86') << 16);
    builder.put("gbreve", ((int) '\u011f') << 16);
    builder.put("gcirc", ((int) '\u011d') << 16);
    builder.put("gcy", ((int) '\u0433') << 16);
    builder.put("gdot", ((int) '\u0121') << 16);
    builder.put("ge", ((int) '\u2265') << 16);
    builder.put("gel", ((int) '\u22db') << 16);
    builder.put("geq", ((int) '\u2265') << 16);
    builder.put("geqq", ((int) '\u2267') << 16);
    builder.put("geqslant", ((int) '\u2a7e') << 16);
    builder.put("ges", ((int) '\u2a7e') << 16);
    builder.put("gescc", ((int) '\u2aa9') << 16);
    builder.put("gesdot", ((int) '\u2a80') << 16);
    builder.put("gesdoto", ((int) '\u2a82') << 16);
    builder.put("gesdotol", ((int) '\u2a84') << 16);
    builder.put("gesl", (((int) '\u22db') << 16) | '\ufe00');
    builder.put("gesles", ((int) '\u2a94') << 16);
    builder.put("gfr", (((int) '\ud835') << 16) | '\udd24');
    builder.put("gg", ((int) '\u226b') << 16);
    builder.put("ggg", ((int) '\u22d9') << 16);
    builder.put("gimel", ((int) '\u2137') << 16);
    builder.put("gjcy", ((int) '\u0453') << 16);
    builder.put("gl", ((int) '\u2277') << 16);
    builder.put("glE", ((int) '\u2a92') << 16);
    builder.put("gla", ((int) '\u2aa5') << 16);
    builder.put("glj", ((int) '\u2aa4') << 16);
    builder.put("gnE", ((int) '\u2269') << 16);
    builder.put("gnap", ((int) '\u2a8a') << 16);
    builder.put("gnapprox", ((int) '\u2a8a') << 16);
    builder.put("gne", ((int) '\u2a88') << 16);
    builder.put("gneq", ((int) '\u2a88') << 16);
    builder.put("gneqq", ((int) '\u2269') << 16);
    builder.put("gnsim", ((int) '\u22e7') << 16);
    builder.put("gopf", (((int) '\ud835') << 16) | '\udd58');
    builder.put("grave", ((int) '\u0060') << 16);
    builder.put("gscr", ((int) '\u210a') << 16);
    builder.put("gsim", ((int) '\u2273') << 16);
    builder.put("gsime", ((int) '\u2a8e') << 16);
    builder.put("gsiml", ((int) '\u2a90') << 16);
    builder.put("gt", ((int) '\u003e') << 16);
    builder.put("gtcc", ((int) '\u2aa7') << 16);
    builder.put("gtcir", ((int) '\u2a7a') << 16);
    builder.put("gtdot", ((int) '\u22d7') << 16);
    builder.put("gtlPar", ((int) '\u2995') << 16);
    builder.put("gtquest", ((int) '\u2a7c') << 16);
    builder.put("gtrapprox", ((int) '\u2a86') << 16);
    builder.put("gtrarr", ((int) '\u2978') << 16);
    builder.put("gtrdot", ((int) '\u22d7') << 16);
    builder.put("gtreqless", ((int) '\u22db') << 16);
    builder.put("gtreqqless", ((int) '\u2a8c') << 16);
    builder.put("gtrless", ((int) '\u2277') << 16);
    builder.put("gtrsim", ((int) '\u2273') << 16);
    builder.put("gvertneqq", (((int) '\u2269') << 16) | '\ufe00');
    builder.put("gvnE", (((int) '\u2269') << 16) | '\ufe00');
    builder.put("hArr", ((int) '\u21d4') << 16);
    builder.put("hairsp", ((int) '\u200a') << 16);
    builder.put("half", ((int) '\u00bd') << 16);
    builder.put("hamilt", ((int) '\u210b') << 16);
    builder.put("hardcy", ((int) '\u044a') << 16);
    builder.put("harr", ((int) '\u2194') << 16);
    builder.put("harrcir", ((int) '\u2948') << 16);
    builder.put("harrw", ((int) '\u21ad') << 16);
    builder.put("hbar", ((int) '\u210f') << 16);
    builder.put("hcirc", ((int) '\u0125') << 16);
    builder.put("hearts", ((int) '\u2665') << 16);
    builder.put("heartsuit", ((int) '\u2665') << 16);
    builder.put("hellip", ((int) '\u2026') << 16);
    builder.put("hercon", ((int) '\u22b9') << 16);
    builder.put("hfr", (((int) '\ud835') << 16) | '\udd25');
    builder.put("hksearow", ((int) '\u2925') << 16);
    builder.put("hkswarow", ((int) '\u2926') << 16);
    builder.put("hoarr", ((int) '\u21ff') << 16);
    builder.put("homtht", ((int) '\u223b') << 16);
    builder.put("hookleftarrow", ((int) '\u21a9') << 16);
    builder.put("hookrightarrow", ((int) '\u21aa') << 16);
    builder.put("hopf", (((int) '\ud835') << 16) | '\udd59');
    builder.put("horbar", ((int) '\u2015') << 16);
    builder.put("hscr", (((int) '\ud835') << 16) | '\udcbd');
    builder.put("hslash", ((int) '\u210f') << 16);
    builder.put("hstrok", ((int) '\u0127') << 16);
    builder.put("hybull", ((int) '\u2043') << 16);
    builder.put("hyphen", ((int) '\u2010') << 16);
    builder.put("iacute", ((int) '\u00ed') << 16);
    builder.put("ic", ((int) '\u2063') << 16);
    builder.put("icirc", ((int) '\u00ee') << 16);
    builder.put("icy", ((int) '\u0438') << 16);
    builder.put("iecy", ((int) '\u0435') << 16);
    builder.put("iexcl", ((int) '\u00a1') << 16);
    builder.put("iff", ((int) '\u21d4') << 16);
    builder.put("ifr", (((int) '\ud835') << 16) | '\udd26');
    builder.put("igrave", ((int) '\u00ec') << 16);
    builder.put("ii", ((int) '\u2148') << 16);
    builder.put("iiiint", ((int) '\u2a0c') << 16);
    builder.put("iiint", ((int) '\u222d') << 16);
    builder.put("iinfin", ((int) '\u29dc') << 16);
    builder.put("iiota", ((int) '\u2129') << 16);
    builder.put("ijlig", ((int) '\u0133') << 16);
    builder.put("imacr", ((int) '\u012b') << 16);
    builder.put("image", ((int) '\u2111') << 16);
    builder.put("imagline", ((int) '\u2110') << 16);
    builder.put("imagpart", ((int) '\u2111') << 16);
    builder.put("imath", ((int) '\u0131') << 16);
    builder.put("imof", ((int) '\u22b7') << 16);
    builder.put("imped", ((int) '\u01b5') << 16);
    builder.put("in", ((int) '\u2208') << 16);
    builder.put("incare", ((int) '\u2105') << 16);
    builder.put("infin", ((int) '\u221e') << 16);
    builder.put("infintie", ((int) '\u29dd') << 16);
    builder.put("inodot", ((int) '\u0131') << 16);
    builder.put("int", ((int) '\u222b') << 16);
    builder.put("intcal", ((int) '\u22ba') << 16);
    builder.put("integers", ((int) '\u2124') << 16);
    builder.put("intercal", ((int) '\u22ba') << 16);
    builder.put("intlarhk", ((int) '\u2a17') << 16);
    builder.put("intprod", ((int) '\u2a3c') << 16);
    builder.put("iocy", ((int) '\u0451') << 16);
    builder.put("iogon", ((int) '\u012f') << 16);
    builder.put("iopf", (((int) '\ud835') << 16) | '\udd5a');
    builder.put("iota", ((int) '\u03b9') << 16);
    builder.put("iprod", ((int) '\u2a3c') << 16);
    builder.put("iquest", ((int) '\u00bf') << 16);
    builder.put("iscr", (((int) '\ud835') << 16) | '\udcbe');
    builder.put("isin", ((int) '\u2208') << 16);
    builder.put("isinE", ((int) '\u22f9') << 16);
    builder.put("isindot", ((int) '\u22f5') << 16);
    builder.put("isins", ((int) '\u22f4') << 16);
    builder.put("isinsv", ((int) '\u22f3') << 16);
    builder.put("isinv", ((int) '\u2208') << 16);
    builder.put("it", ((int) '\u2062') << 16);
    builder.put("itilde", ((int) '\u0129') << 16);
    builder.put("iukcy", ((int) '\u0456') << 16);
    builder.put("iuml", ((int) '\u00ef') << 16);
    builder.put("jcirc", ((int) '\u0135') << 16);
    builder.put("jcy", ((int) '\u0439') << 16);
    builder.put("jfr", (((int) '\ud835') << 16) | '\udd27');
    builder.put("jmath", ((int) '\u0237') << 16);
    builder.put("jopf", (((int) '\ud835') << 16) | '\udd5b');
    builder.put("jscr", (((int) '\ud835') << 16) | '\udcbf');
    builder.put("jsercy", ((int) '\u0458') << 16);
    builder.put("jukcy", ((int) '\u0454') << 16);
    builder.put("kappa", ((int) '\u03ba') << 16);
    builder.put("kappav", ((int) '\u03f0') << 16);
    builder.put("kcedil", ((int) '\u0137') << 16);
    builder.put("kcy", ((int) '\u043a') << 16);
    builder.put("kfr", (((int) '\ud835') << 16) | '\udd28');
    builder.put("kgreen", ((int) '\u0138') << 16);
    builder.put("khcy", ((int) '\u0445') << 16);
    builder.put("kjcy", ((int) '\u045c') << 16);
    builder.put("kopf", (((int) '\ud835') << 16) | '\udd5c');
    builder.put("kscr", (((int) '\ud835') << 16) | '\udcc0');
    builder.put("lAarr", ((int) '\u21da') << 16);
    builder.put("lArr", ((int) '\u21d0') << 16);
    builder.put("lAtail", ((int) '\u291b') << 16);
    builder.put("lBarr", ((int) '\u290e') << 16);
    builder.put("lE", ((int) '\u2266') << 16);
    builder.put("lEg", ((int) '\u2a8b') << 16);
    builder.put("lHar", ((int) '\u2962') << 16);
    builder.put("lacute", ((int) '\u013a') << 16);
    builder.put("laemptyv", ((int) '\u29b4') << 16);
    builder.put("lagran", ((int) '\u2112') << 16);
    builder.put("lambda", ((int) '\u03bb') << 16);
    builder.put("lang", ((int) '\u27e8') << 16);
    builder.put("langd", ((int) '\u2991') << 16);
    builder.put("langle", ((int) '\u27e8') << 16);
    builder.put("lap", ((int) '\u2a85') << 16);
    builder.put("laquo", ((int) '\u00ab') << 16);
    builder.put("larr", ((int) '\u2190') << 16);
    builder.put("larrb", ((int) '\u21e4') << 16);
    builder.put("larrbfs", ((int) '\u291f') << 16);
    builder.put("larrfs", ((int) '\u291d') << 16);
    builder.put("larrhk", ((int) '\u21a9') << 16);
    builder.put("larrlp", ((int) '\u21ab') << 16);
    builder.put("larrpl", ((int) '\u2939') << 16);
    builder.put("larrsim", ((int) '\u2973') << 16);
    builder.put("larrtl", ((int) '\u21a2') << 16);
    builder.put("lat", ((int) '\u2aab') << 16);
    builder.put("latail", ((int) '\u2919') << 16);
    builder.put("late", ((int) '\u2aad') << 16);
    builder.put("lates", (((int) '\u2aad') << 16) | '\ufe00');
    builder.put("lbarr", ((int) '\u290c') << 16);
    builder.put("lbbrk", ((int) '\u2772') << 16);
    builder.put("lbrace", ((int) '\u007b') << 16);
    builder.put("lbrack", ((int) '\u005b') << 16);
    builder.put("lbrke", ((int) '\u298b') << 16);
    builder.put("lbrksld", ((int) '\u298f') << 16);
    builder.put("lbrkslu", ((int) '\u298d') << 16);
    builder.put("lcaron", ((int) '\u013e') << 16);
    builder.put("lcedil", ((int) '\u013c') << 16);
    builder.put("lceil", ((int) '\u2308') << 16);
    builder.put("lcub", ((int) '\u007b') << 16);
    builder.put("lcy", ((int) '\u043b') << 16);
    builder.put("ldca", ((int) '\u2936') << 16);
    builder.put("ldquo", ((int) '\u201c') << 16);
    builder.put("ldquor", ((int) '\u201e') << 16);
    builder.put("ldrdhar", ((int) '\u2967') << 16);
    builder.put("ldrushar", ((int) '\u294b') << 16);
    builder.put("ldsh", ((int) '\u21b2') << 16);
    builder.put("le", ((int) '\u2264') << 16);
    builder.put("leftarrow", ((int) '\u2190') << 16);
    builder.put("leftarrowtail", ((int) '\u21a2') << 16);
    builder.put("leftharpoondown", ((int) '\u21bd') << 16);
    builder.put("leftharpoonup", ((int) '\u21bc') << 16);
    builder.put("leftleftarrows", ((int) '\u21c7') << 16);
    builder.put("leftrightarrow", ((int) '\u2194') << 16);
    builder.put("leftrightarrows", ((int) '\u21c6') << 16);
    builder.put("leftrightharpoons", ((int) '\u21cb') << 16);
    builder.put("leftrightsquigarrow", ((int) '\u21ad') << 16);
    builder.put("leftthreetimes", ((int) '\u22cb') << 16);
    builder.put("leg", ((int) '\u22da') << 16);
    builder.put("leq", ((int) '\u2264') << 16);
    builder.put("leqq", ((int) '\u2266') << 16);
    builder.put("leqslant", ((int) '\u2a7d') << 16);
    builder.put("les", ((int) '\u2a7d') << 16);
    builder.put("lescc", ((int) '\u2aa8') << 16);
    builder.put("lesdot", ((int) '\u2a7f') << 16);
    builder.put("lesdoto", ((int) '\u2a81') << 16);
    builder.put("lesdotor", ((int) '\u2a83') << 16);
    builder.put("lesg", (((int) '\u22da') << 16) | '\ufe00');
    builder.put("lesges", ((int) '\u2a93') << 16);
    builder.put("lessapprox", ((int) '\u2a85') << 16);
    builder.put("lessdot", ((int) '\u22d6') << 16);
    builder.put("lesseqgtr", ((int) '\u22da') << 16);
    builder.put("lesseqqgtr", ((int) '\u2a8b') << 16);
    builder.put("lessgtr", ((int) '\u2276') << 16);
    builder.put("lesssim", ((int) '\u2272') << 16);
    builder.put("lfisht", ((int) '\u297c') << 16);
    builder.put("lfloor", ((int) '\u230a') << 16);
    builder.put("lfr", (((int) '\ud835') << 16) | '\udd29');
    builder.put("lg", ((int) '\u2276') << 16);
    builder.put("lgE", ((int) '\u2a91') << 16);
    builder.put("lhard", ((int) '\u21bd') << 16);
    builder.put("lharu", ((int) '\u21bc') << 16);
    builder.put("lharul", ((int) '\u296a') << 16);
    builder.put("lhblk", ((int) '\u2584') << 16);
    builder.put("ljcy", ((int) '\u0459') << 16);
    builder.put("ll", ((int) '\u226a') << 16);
    builder.put("llarr", ((int) '\u21c7') << 16);
    builder.put("llcorner", ((int) '\u231e') << 16);
    builder.put("llhard", ((int) '\u296b') << 16);
    builder.put("lltri", ((int) '\u25fa') << 16);
    builder.put("lmidot", ((int) '\u0140') << 16);
    builder.put("lmoust", ((int) '\u23b0') << 16);
    builder.put("lmoustache", ((int) '\u23b0') << 16);
    builder.put("lnE", ((int) '\u2268') << 16);
    builder.put("lnap", ((int) '\u2a89') << 16);
    builder.put("lnapprox", ((int) '\u2a89') << 16);
    builder.put("lne", ((int) '\u2a87') << 16);
    builder.put("lneq", ((int) '\u2a87') << 16);
    builder.put("lneqq", ((int) '\u2268') << 16);
    builder.put("lnsim", ((int) '\u22e6') << 16);
    builder.put("loang", ((int) '\u27ec') << 16);
    builder.put("loarr", ((int) '\u21fd') << 16);
    builder.put("lobrk", ((int) '\u27e6') << 16);
    builder.put("longleftarrow", ((int) '\u27f5') << 16);
    builder.put("longleftrightarrow", ((int) '\u27f7') << 16);
    builder.put("longmapsto", ((int) '\u27fc') << 16);
    builder.put("longrightarrow", ((int) '\u27f6') << 16);
    builder.put("looparrowleft", ((int) '\u21ab') << 16);
    builder.put("looparrowright", ((int) '\u21ac') << 16);
    builder.put("lopar", ((int) '\u2985') << 16);
    builder.put("lopf", (((int) '\ud835') << 16) | '\udd5d');
    builder.put("loplus", ((int) '\u2a2d') << 16);
    builder.put("lotimes", ((int) '\u2a34') << 16);
    builder.put("lowast", ((int) '\u2217') << 16);
    builder.put("lowbar", ((int) '\u005f') << 16);
    builder.put("loz", ((int) '\u25ca') << 16);
    builder.put("lozenge", ((int) '\u25ca') << 16);
    builder.put("lozf", ((int) '\u29eb') << 16);
    builder.put("lpar", ((int) '\u0028') << 16);
    builder.put("lparlt", ((int) '\u2993') << 16);
    builder.put("lrarr", ((int) '\u21c6') << 16);
    builder.put("lrcorner", ((int) '\u231f') << 16);
    builder.put("lrhar", ((int) '\u21cb') << 16);
    builder.put("lrhard", ((int) '\u296d') << 16);
    builder.put("lrm", ((int) '\u200e') << 16);
    builder.put("lrtri", ((int) '\u22bf') << 16);
    builder.put("lsaquo", ((int) '\u2039') << 16);
    builder.put("lscr", (((int) '\ud835') << 16) | '\udcc1');
    builder.put("lsh", ((int) '\u21b0') << 16);
    builder.put("lsim", ((int) '\u2272') << 16);
    builder.put("lsime", ((int) '\u2a8d') << 16);
    builder.put("lsimg", ((int) '\u2a8f') << 16);
    builder.put("lsqb", ((int) '\u005b') << 16);
    builder.put("lsquo", ((int) '\u2018') << 16);
    builder.put("lsquor", ((int) '\u201a') << 16);
    builder.put("lstrok", ((int) '\u0142') << 16);
    builder.put("lt", ((int) '\u003c') << 16);
    builder.put("ltcc", ((int) '\u2aa6') << 16);
    builder.put("ltcir", ((int) '\u2a79') << 16);
    builder.put("ltdot", ((int) '\u22d6') << 16);
    builder.put("lthree", ((int) '\u22cb') << 16);
    builder.put("ltimes", ((int) '\u22c9') << 16);
    builder.put("ltlarr", ((int) '\u2976') << 16);
    builder.put("ltquest", ((int) '\u2a7b') << 16);
    builder.put("ltrPar", ((int) '\u2996') << 16);
    builder.put("ltri", ((int) '\u25c3') << 16);
    builder.put("ltrie", ((int) '\u22b4') << 16);
    builder.put("ltrif", ((int) '\u25c2') << 16);
    builder.put("lurdshar", ((int) '\u294a') << 16);
    builder.put("luruhar", ((int) '\u2966') << 16);
    builder.put("lvertneqq", (((int) '\u2268') << 16) | '\ufe00');
    builder.put("lvnE", (((int) '\u2268') << 16) | '\ufe00');
    builder.put("mDDot", ((int) '\u223a') << 16);
    builder.put("macr", ((int) '\u00af') << 16);
    builder.put("male", ((int) '\u2642') << 16);
    builder.put("malt", ((int) '\u2720') << 16);
    builder.put("maltese", ((int) '\u2720') << 16);
    builder.put("map", ((int) '\u21a6') << 16);
    builder.put("mapsto", ((int) '\u21a6') << 16);
    builder.put("mapstodown", ((int) '\u21a7') << 16);
    builder.put("mapstoleft", ((int) '\u21a4') << 16);
    builder.put("mapstoup", ((int) '\u21a5') << 16);
    builder.put("marker", ((int) '\u25ae') << 16);
    builder.put("mcomma", ((int) '\u2a29') << 16);
    builder.put("mcy", ((int) '\u043c') << 16);
    builder.put("mdash", ((int) '\u2014') << 16);
    builder.put("measuredangle", ((int) '\u2221') << 16);
    builder.put("mfr", (((int) '\ud835') << 16) | '\udd2a');
    builder.put("mho", ((int) '\u2127') << 16);
    builder.put("micro", ((int) '\u00b5') << 16);
    builder.put("mid", ((int) '\u2223') << 16);
    builder.put("midast", ((int) '\u002a') << 16);
    builder.put("midcir", ((int) '\u2af0') << 16);
    builder.put("middot", ((int) '\u00b7') << 16);
    builder.put("minus", ((int) '\u2212') << 16);
    builder.put("minusb", ((int) '\u229f') << 16);
    builder.put("minusd", ((int) '\u2238') << 16);
    builder.put("minusdu", ((int) '\u2a2a') << 16);
    builder.put("mlcp", ((int) '\u2adb') << 16);
    builder.put("mldr", ((int) '\u2026') << 16);
    builder.put("mnplus", ((int) '\u2213') << 16);
    builder.put("models", ((int) '\u22a7') << 16);
    builder.put("mopf", (((int) '\ud835') << 16) | '\udd5e');
    builder.put("mp", ((int) '\u2213') << 16);
    builder.put("mscr", (((int) '\ud835') << 16) | '\udcc2');
    builder.put("mstpos", ((int) '\u223e') << 16);
    builder.put("mu", ((int) '\u03bc') << 16);
    builder.put("multimap", ((int) '\u22b8') << 16);
    builder.put("mumap", ((int) '\u22b8') << 16);
    builder.put("nGg", (((int) '\u22d9') << 16) | '\u0338');
    builder.put("nGt", (((int) '\u226b') << 16) | '\u20d2');
    builder.put("nGtv", (((int) '\u226b') << 16) | '\u0338');
    builder.put("nLeftarrow", ((int) '\u21cd') << 16);
    builder.put("nLeftrightarrow", ((int) '\u21ce') << 16);
    builder.put("nLl", (((int) '\u22d8') << 16) | '\u0338');
    builder.put("nLt", (((int) '\u226a') << 16) | '\u20d2');
    builder.put("nLtv", (((int) '\u226a') << 16) | '\u0338');
    builder.put("nRightarrow", ((int) '\u21cf') << 16);
    builder.put("nVDash", ((int) '\u22af') << 16);
    builder.put("nVdash", ((int) '\u22ae') << 16);
    builder.put("nabla", ((int) '\u2207') << 16);
    builder.put("nacute", ((int) '\u0144') << 16);
    builder.put("nang", (((int) '\u2220') << 16) | '\u20d2');
    builder.put("nap", ((int) '\u2249') << 16);
    builder.put("napE", (((int) '\u2a70') << 16) | '\u0338');
    builder.put("napid", (((int) '\u224b') << 16) | '\u0338');
    builder.put("napos", ((int) '\u0149') << 16);
    builder.put("napprox", ((int) '\u2249') << 16);
    builder.put("natur", ((int) '\u266e') << 16);
    builder.put("natural", ((int) '\u266e') << 16);
    builder.put("naturals", ((int) '\u2115') << 16);
    builder.put("nbsp", ((int) '\u00a0') << 16);
    builder.put("nbump", (((int) '\u224e') << 16) | '\u0338');
    builder.put("nbumpe", (((int) '\u224f') << 16) | '\u0338');
    builder.put("ncap", ((int) '\u2a43') << 16);
    builder.put("ncaron", ((int) '\u0148') << 16);
    builder.put("ncedil", ((int) '\u0146') << 16);
    builder.put("ncong", ((int) '\u2247') << 16);
    builder.put("ncongdot", (((int) '\u2a6d') << 16) | '\u0338');
    builder.put("ncup", ((int) '\u2a42') << 16);
    builder.put("ncy", ((int) '\u043d') << 16);
    builder.put("ndash", ((int) '\u2013') << 16);
    builder.put("ne", ((int) '\u2260') << 16);
    builder.put("neArr", ((int) '\u21d7') << 16);
    builder.put("nearhk", ((int) '\u2924') << 16);
    builder.put("nearr", ((int) '\u2197') << 16);
    builder.put("nearrow", ((int) '\u2197') << 16);
    builder.put("nedot", (((int) '\u2250') << 16) | '\u0338');
    builder.put("nequiv", ((int) '\u2262') << 16);
    builder.put("nesear", ((int) '\u2928') << 16);
    builder.put("nesim", (((int) '\u2242') << 16) | '\u0338');
    builder.put("nexist", ((int) '\u2204') << 16);
    builder.put("nexists", ((int) '\u2204') << 16);
    builder.put("nfr", (((int) '\ud835') << 16) | '\udd2b');
    builder.put("ngE", (((int) '\u2267') << 16) | '\u0338');
    builder.put("nge", ((int) '\u2271') << 16);
    builder.put("ngeq", ((int) '\u2271') << 16);
    builder.put("ngeqq", (((int) '\u2267') << 16) | '\u0338');
    builder.put("ngeqslant", (((int) '\u2a7e') << 16) | '\u0338');
    builder.put("nges", (((int) '\u2a7e') << 16) | '\u0338');
    builder.put("ngsim", ((int) '\u2275') << 16);
    builder.put("ngt", ((int) '\u226f') << 16);
    builder.put("ngtr", ((int) '\u226f') << 16);
    builder.put("nhArr", ((int) '\u21ce') << 16);
    builder.put("nharr", ((int) '\u21ae') << 16);
    builder.put("nhpar", ((int) '\u2af2') << 16);
    builder.put("ni", ((int) '\u220b') << 16);
    builder.put("nis", ((int) '\u22fc') << 16);
    builder.put("nisd", ((int) '\u22fa') << 16);
    builder.put("niv", ((int) '\u220b') << 16);
    builder.put("njcy", ((int) '\u045a') << 16);
    builder.put("nlArr", ((int) '\u21cd') << 16);
    builder.put("nlE", (((int) '\u2266') << 16) | '\u0338');
    builder.put("nlarr", ((int) '\u219a') << 16);
    builder.put("nldr", ((int) '\u2025') << 16);
    builder.put("nle", ((int) '\u2270') << 16);
    builder.put("nleftarrow", ((int) '\u219a') << 16);
    builder.put("nleftrightarrow", ((int) '\u21ae') << 16);
    builder.put("nleq", ((int) '\u2270') << 16);
    builder.put("nleqq", (((int) '\u2266') << 16) | '\u0338');
    builder.put("nleqslant", (((int) '\u2a7d') << 16) | '\u0338');
    builder.put("nles", (((int) '\u2a7d') << 16) | '\u0338');
    builder.put("nless", ((int) '\u226e') << 16);
    builder.put("nlsim", ((int) '\u2274') << 16);
    builder.put("nlt", ((int) '\u226e') << 16);
    builder.put("nltri", ((int) '\u22ea') << 16);
    builder.put("nltrie", ((int) '\u22ec') << 16);
    builder.put("nmid", ((int) '\u2224') << 16);
    builder.put("nopf", (((int) '\ud835') << 16) | '\udd5f');
    builder.put("not", ((int) '\u00ac') << 16);
    builder.put("notin", ((int) '\u2209') << 16);
    builder.put("notinE", (((int) '\u22f9') << 16) | '\u0338');
    builder.put("notindot", (((int) '\u22f5') << 16) | '\u0338');
    builder.put("notinva", ((int) '\u2209') << 16);
    builder.put("notinvb", ((int) '\u22f7') << 16);
    builder.put("notinvc", ((int) '\u22f6') << 16);
    builder.put("notni", ((int) '\u220c') << 16);
    builder.put("notniva", ((int) '\u220c') << 16);
    builder.put("notnivb", ((int) '\u22fe') << 16);
    builder.put("notnivc", ((int) '\u22fd') << 16);
    builder.put("npar", ((int) '\u2226') << 16);
    builder.put("nparallel", ((int) '\u2226') << 16);
    builder.put("nparsl", (((int) '\u2afd') << 16) | '\u20e5');
    builder.put("npart", (((int) '\u2202') << 16) | '\u0338');
    builder.put("npolint", ((int) '\u2a14') << 16);
    builder.put("npr", ((int) '\u2280') << 16);
    builder.put("nprcue", ((int) '\u22e0') << 16);
    builder.put("npre", (((int) '\u2aaf') << 16) | '\u0338');
    builder.put("nprec", ((int) '\u2280') << 16);
    builder.put("npreceq", (((int) '\u2aaf') << 16) | '\u0338');
    builder.put("nrArr", ((int) '\u21cf') << 16);
    builder.put("nrarr", ((int) '\u219b') << 16);
    builder.put("nrarrc", (((int) '\u2933') << 16) | '\u0338');
    builder.put("nrarrw", (((int) '\u219d') << 16) | '\u0338');
    builder.put("nrightarrow", ((int) '\u219b') << 16);
    builder.put("nrtri", ((int) '\u22eb') << 16);
    builder.put("nrtrie", ((int) '\u22ed') << 16);
    builder.put("nsc", ((int) '\u2281') << 16);
    builder.put("nsccue", ((int) '\u22e1') << 16);
    builder.put("nsce", (((int) '\u2ab0') << 16) | '\u0338');
    builder.put("nscr", (((int) '\ud835') << 16) | '\udcc3');
    builder.put("nshortmid", ((int) '\u2224') << 16);
    builder.put("nshortparallel", ((int) '\u2226') << 16);
    builder.put("nsim", ((int) '\u2241') << 16);
    builder.put("nsime", ((int) '\u2244') << 16);
    builder.put("nsimeq", ((int) '\u2244') << 16);
    builder.put("nsmid", ((int) '\u2224') << 16);
    builder.put("nspar", ((int) '\u2226') << 16);
    builder.put("nsqsube", ((int) '\u22e2') << 16);
    builder.put("nsqsupe", ((int) '\u22e3') << 16);
    builder.put("nsub", ((int) '\u2284') << 16);
    builder.put("nsubE", (((int) '\u2ac5') << 16) | '\u0338');
    builder.put("nsube", ((int) '\u2288') << 16);
    builder.put("nsubset", (((int) '\u2282') << 16) | '\u20d2');
    builder.put("nsubseteq", ((int) '\u2288') << 16);
    builder.put("nsubseteqq", (((int) '\u2ac5') << 16) | '\u0338');
    builder.put("nsucc", ((int) '\u2281') << 16);
    builder.put("nsucceq", (((int) '\u2ab0') << 16) | '\u0338');
    builder.put("nsup", ((int) '\u2285') << 16);
    builder.put("nsupE", (((int) '\u2ac6') << 16) | '\u0338');
    builder.put("nsupe", ((int) '\u2289') << 16);
    builder.put("nsupset", (((int) '\u2283') << 16) | '\u20d2');
    builder.put("nsupseteq", ((int) '\u2289') << 16);
    builder.put("nsupseteqq", (((int) '\u2ac6') << 16) | '\u0338');
    builder.put("ntgl", ((int) '\u2279') << 16);
    builder.put("ntilde", ((int) '\u00f1') << 16);
    builder.put("ntlg", ((int) '\u2278') << 16);
    builder.put("ntriangleleft", ((int) '\u22ea') << 16);
    builder.put("ntrianglelefteq", ((int) '\u22ec') << 16);
    builder.put("ntriangleright", ((int) '\u22eb') << 16);
    builder.put("ntrianglerighteq", ((int) '\u22ed') << 16);
    builder.put("nu", ((int) '\u03bd') << 16);
    builder.put("num", ((int) '\u0023') << 16);
    builder.put("numero", ((int) '\u2116') << 16);
    builder.put("numsp", ((int) '\u2007') << 16);
    builder.put("nvDash", ((int) '\u22ad') << 16);
    builder.put("nvHarr", ((int) '\u2904') << 16);
    builder.put("nvap", (((int) '\u224d') << 16) | '\u20d2');
    builder.put("nvdash", ((int) '\u22ac') << 16);
    builder.put("nvge", (((int) '\u2265') << 16) | '\u20d2');
    builder.put("nvgt", (((int) '\u003e') << 16) | '\u20d2');
    builder.put("nvinfin", ((int) '\u29de') << 16);
    builder.put("nvlArr", ((int) '\u2902') << 16);
    builder.put("nvle", (((int) '\u2264') << 16) | '\u20d2');
    builder.put("nvlt", (((int) '\u003c') << 16) | '\u20d2');
    builder.put("nvltrie", (((int) '\u22b4') << 16) | '\u20d2');
    builder.put("nvrArr", ((int) '\u2903') << 16);
    builder.put("nvrtrie", (((int) '\u22b5') << 16) | '\u20d2');
    builder.put("nvsim", (((int) '\u223c') << 16) | '\u20d2');
    builder.put("nwArr", ((int) '\u21d6') << 16);
    builder.put("nwarhk", ((int) '\u2923') << 16);
    builder.put("nwarr", ((int) '\u2196') << 16);
    builder.put("nwarrow", ((int) '\u2196') << 16);
    builder.put("nwnear", ((int) '\u2927') << 16);
    builder.put("oS", ((int) '\u24c8') << 16);
    builder.put("oacute", ((int) '\u00f3') << 16);
    builder.put("oast", ((int) '\u229b') << 16);
    builder.put("ocir", ((int) '\u229a') << 16);
    builder.put("ocirc", ((int) '\u00f4') << 16);
    builder.put("ocy", ((int) '\u043e') << 16);
    builder.put("odash", ((int) '\u229d') << 16);
    builder.put("odblac", ((int) '\u0151') << 16);
    builder.put("odiv", ((int) '\u2a38') << 16);
    builder.put("odot", ((int) '\u2299') << 16);
    builder.put("odsold", ((int) '\u29bc') << 16);
    builder.put("oelig", ((int) '\u0153') << 16);
    builder.put("ofcir", ((int) '\u29bf') << 16);
    builder.put("ofr", (((int) '\ud835') << 16) | '\udd2c');
    builder.put("ogon", ((int) '\u02db') << 16);
    builder.put("ograve", ((int) '\u00f2') << 16);
    builder.put("ogt", ((int) '\u29c1') << 16);
    builder.put("ohbar", ((int) '\u29b5') << 16);
    builder.put("ohm", ((int) '\u03a9') << 16);
    builder.put("oint", ((int) '\u222e') << 16);
    builder.put("olarr", ((int) '\u21ba') << 16);
    builder.put("olcir", ((int) '\u29be') << 16);
    builder.put("olcross", ((int) '\u29bb') << 16);
    builder.put("oline", ((int) '\u203e') << 16);
    builder.put("olt", ((int) '\u29c0') << 16);
    builder.put("omacr", ((int) '\u014d') << 16);
    builder.put("omega", ((int) '\u03c9') << 16);
    builder.put("omicron", ((int) '\u03bf') << 16);
    builder.put("omid", ((int) '\u29b6') << 16);
    builder.put("ominus", ((int) '\u2296') << 16);
    builder.put("oopf", (((int) '\ud835') << 16) | '\udd60');
    builder.put("opar", ((int) '\u29b7') << 16);
    builder.put("operp", ((int) '\u29b9') << 16);
    builder.put("oplus", ((int) '\u2295') << 16);
    builder.put("or", ((int) '\u2228') << 16);
    builder.put("orarr", ((int) '\u21bb') << 16);
    builder.put("ord", ((int) '\u2a5d') << 16);
    builder.put("order", ((int) '\u2134') << 16);
    builder.put("orderof", ((int) '\u2134') << 16);
    builder.put("ordf", ((int) '\u00aa') << 16);
    builder.put("ordm", ((int) '\u00ba') << 16);
    builder.put("origof", ((int) '\u22b6') << 16);
    builder.put("oror", ((int) '\u2a56') << 16);
    builder.put("orslope", ((int) '\u2a57') << 16);
    builder.put("orv", ((int) '\u2a5b') << 16);
    builder.put("oscr", ((int) '\u2134') << 16);
    builder.put("oslash", ((int) '\u00f8') << 16);
    builder.put("osol", ((int) '\u2298') << 16);
    builder.put("otilde", ((int) '\u00f5') << 16);
    builder.put("otimes", ((int) '\u2297') << 16);
    builder.put("otimesas", ((int) '\u2a36') << 16);
    builder.put("ouml", ((int) '\u00f6') << 16);
    builder.put("ovbar", ((int) '\u233d') << 16);
    builder.put("par", ((int) '\u2225') << 16);
    builder.put("para", ((int) '\u00b6') << 16);
    builder.put("parallel", ((int) '\u2225') << 16);
    builder.put("parsim", ((int) '\u2af3') << 16);
    builder.put("parsl", ((int) '\u2afd') << 16);
    builder.put("part", ((int) '\u2202') << 16);
    builder.put("pcy", ((int) '\u043f') << 16);
    builder.put("percnt", ((int) '\u0025') << 16);
    builder.put("period", ((int) '\u002e') << 16);
    builder.put("permil", ((int) '\u2030') << 16);
    builder.put("perp", ((int) '\u22a5') << 16);
    builder.put("pertenk", ((int) '\u2031') << 16);
    builder.put("pfr", (((int) '\ud835') << 16) | '\udd2d');
    builder.put("phi", ((int) '\u03c6') << 16);
    builder.put("phiv", ((int) '\u03d5') << 16);
    builder.put("phmmat", ((int) '\u2133') << 16);
    builder.put("phone", ((int) '\u260e') << 16);
    builder.put("pi", ((int) '\u03c0') << 16);
    builder.put("pitchfork", ((int) '\u22d4') << 16);
    builder.put("piv", ((int) '\u03d6') << 16);
    builder.put("planck", ((int) '\u210f') << 16);
    builder.put("planckh", ((int) '\u210e') << 16);
    builder.put("plankv", ((int) '\u210f') << 16);
    builder.put("plus", ((int) '\u002b') << 16);
    builder.put("plusacir", ((int) '\u2a23') << 16);
    builder.put("plusb", ((int) '\u229e') << 16);
    builder.put("pluscir", ((int) '\u2a22') << 16);
    builder.put("plusdo", ((int) '\u2214') << 16);
    builder.put("plusdu", ((int) '\u2a25') << 16);
    builder.put("pluse", ((int) '\u2a72') << 16);
    builder.put("plusmn", ((int) '\u00b1') << 16);
    builder.put("plussim", ((int) '\u2a26') << 16);
    builder.put("plustwo", ((int) '\u2a27') << 16);
    builder.put("pm", ((int) '\u00b1') << 16);
    builder.put("pointint", ((int) '\u2a15') << 16);
    builder.put("popf", (((int) '\ud835') << 16) | '\udd61');
    builder.put("pound", ((int) '\u00a3') << 16);
    builder.put("pr", ((int) '\u227a') << 16);
    builder.put("prE", ((int) '\u2ab3') << 16);
    builder.put("prap", ((int) '\u2ab7') << 16);
    builder.put("prcue", ((int) '\u227c') << 16);
    builder.put("pre", ((int) '\u2aaf') << 16);
    builder.put("prec", ((int) '\u227a') << 16);
    builder.put("precapprox", ((int) '\u2ab7') << 16);
    builder.put("preccurlyeq", ((int) '\u227c') << 16);
    builder.put("preceq", ((int) '\u2aaf') << 16);
    builder.put("precnapprox", ((int) '\u2ab9') << 16);
    builder.put("precneqq", ((int) '\u2ab5') << 16);
    builder.put("precnsim", ((int) '\u22e8') << 16);
    builder.put("precsim", ((int) '\u227e') << 16);
    builder.put("prime", ((int) '\u2032') << 16);
    builder.put("primes", ((int) '\u2119') << 16);
    builder.put("prnE", ((int) '\u2ab5') << 16);
    builder.put("prnap", ((int) '\u2ab9') << 16);
    builder.put("prnsim", ((int) '\u22e8') << 16);
    builder.put("prod", ((int) '\u220f') << 16);
    builder.put("profalar", ((int) '\u232e') << 16);
    builder.put("profline", ((int) '\u2312') << 16);
    builder.put("profsurf", ((int) '\u2313') << 16);
    builder.put("prop", ((int) '\u221d') << 16);
    builder.put("propto", ((int) '\u221d') << 16);
    builder.put("prsim", ((int) '\u227e') << 16);
    builder.put("prurel", ((int) '\u22b0') << 16);
    builder.put("pscr", (((int) '\ud835') << 16) | '\udcc5');
    builder.put("psi", ((int) '\u03c8') << 16);
    builder.put("puncsp", ((int) '\u2008') << 16);
    builder.put("qfr", (((int) '\ud835') << 16) | '\udd2e');
    builder.put("qint", ((int) '\u2a0c') << 16);
    builder.put("qopf", (((int) '\ud835') << 16) | '\udd62');
    builder.put("qprime", ((int) '\u2057') << 16);
    builder.put("qscr", (((int) '\ud835') << 16) | '\udcc6');
    builder.put("quaternions", ((int) '\u210d') << 16);
    builder.put("quatint", ((int) '\u2a16') << 16);
    builder.put("quest", ((int) '\u003f') << 16);
    builder.put("questeq", ((int) '\u225f') << 16);
    builder.put("quot", ((int) '\u0022') << 16);
    builder.put("rAarr", ((int) '\u21db') << 16);
    builder.put("rArr", ((int) '\u21d2') << 16);
    builder.put("rAtail", ((int) '\u291c') << 16);
    builder.put("rBarr", ((int) '\u290f') << 16);
    builder.put("rHar", ((int) '\u2964') << 16);
    builder.put("race", (((int) '\u223d') << 16) | '\u0331');
    builder.put("racute", ((int) '\u0155') << 16);
    builder.put("radic", ((int) '\u221a') << 16);
    builder.put("raemptyv", ((int) '\u29b3') << 16);
    builder.put("rang", ((int) '\u27e9') << 16);
    builder.put("rangd", ((int) '\u2992') << 16);
    builder.put("range", ((int) '\u29a5') << 16);
    builder.put("rangle", ((int) '\u27e9') << 16);
    builder.put("raquo", ((int) '\u00bb') << 16);
    builder.put("rarr", ((int) '\u2192') << 16);
    builder.put("rarrap", ((int) '\u2975') << 16);
    builder.put("rarrb", ((int) '\u21e5') << 16);
    builder.put("rarrbfs", ((int) '\u2920') << 16);
    builder.put("rarrc", ((int) '\u2933') << 16);
    builder.put("rarrfs", ((int) '\u291e') << 16);
    builder.put("rarrhk", ((int) '\u21aa') << 16);
    builder.put("rarrlp", ((int) '\u21ac') << 16);
    builder.put("rarrpl", ((int) '\u2945') << 16);
    builder.put("rarrsim", ((int) '\u2974') << 16);
    builder.put("rarrtl", ((int) '\u21a3') << 16);
    builder.put("rarrw", ((int) '\u219d') << 16);
    builder.put("ratail", ((int) '\u291a') << 16);
    builder.put("ratio", ((int) '\u2236') << 16);
    builder.put("rationals", ((int) '\u211a') << 16);
    builder.put("rbarr", ((int) '\u290d') << 16);
    builder.put("rbbrk", ((int) '\u2773') << 16);
    builder.put("rbrace", ((int) '\u007d') << 16);
    builder.put("rbrack", ((int) '\u005d') << 16);
    builder.put("rbrke", ((int) '\u298c') << 16);
    builder.put("rbrksld", ((int) '\u298e') << 16);
    builder.put("rbrkslu", ((int) '\u2990') << 16);
    builder.put("rcaron", ((int) '\u0159') << 16);
    builder.put("rcedil", ((int) '\u0157') << 16);
    builder.put("rceil", ((int) '\u2309') << 16);
    builder.put("rcub", ((int) '\u007d') << 16);
    builder.put("rcy", ((int) '\u0440') << 16);
    builder.put("rdca", ((int) '\u2937') << 16);
    builder.put("rdldhar", ((int) '\u2969') << 16);
    builder.put("rdquo", ((int) '\u201d') << 16);
    builder.put("rdquor", ((int) '\u201d') << 16);
    builder.put("rdsh", ((int) '\u21b3') << 16);
    builder.put("real", ((int) '\u211c') << 16);
    builder.put("realine", ((int) '\u211b') << 16);
    builder.put("realpart", ((int) '\u211c') << 16);
    builder.put("reals", ((int) '\u211d') << 16);
    builder.put("rect", ((int) '\u25ad') << 16);
    builder.put("reg", ((int) '\u00ae') << 16);
    builder.put("rfisht", ((int) '\u297d') << 16);
    builder.put("rfloor", ((int) '\u230b') << 16);
    builder.put("rfr", (((int) '\ud835') << 16) | '\udd2f');
    builder.put("rhard", ((int) '\u21c1') << 16);
    builder.put("rharu", ((int) '\u21c0') << 16);
    builder.put("rharul", ((int) '\u296c') << 16);
    builder.put("rho", ((int) '\u03c1') << 16);
    builder.put("rhov", ((int) '\u03f1') << 16);
    builder.put("rightarrow", ((int) '\u2192') << 16);
    builder.put("rightarrowtail", ((int) '\u21a3') << 16);
    builder.put("rightharpoondown", ((int) '\u21c1') << 16);
    builder.put("rightharpoonup", ((int) '\u21c0') << 16);
    builder.put("rightleftarrows", ((int) '\u21c4') << 16);
    builder.put("rightleftharpoons", ((int) '\u21cc') << 16);
    builder.put("rightrightarrows", ((int) '\u21c9') << 16);
    builder.put("rightsquigarrow", ((int) '\u219d') << 16);
    builder.put("rightthreetimes", ((int) '\u22cc') << 16);
    builder.put("ring", ((int) '\u02da') << 16);
    builder.put("risingdotseq", ((int) '\u2253') << 16);
    builder.put("rlarr", ((int) '\u21c4') << 16);
    builder.put("rlhar", ((int) '\u21cc') << 16);
    builder.put("rlm", ((int) '\u200f') << 16);
    builder.put("rmoust", ((int) '\u23b1') << 16);
    builder.put("rmoustache", ((int) '\u23b1') << 16);
    builder.put("rnmid", ((int) '\u2aee') << 16);
    builder.put("roang", ((int) '\u27ed') << 16);
    builder.put("roarr", ((int) '\u21fe') << 16);
    builder.put("robrk", ((int) '\u27e7') << 16);
    builder.put("ropar", ((int) '\u2986') << 16);
    builder.put("ropf", (((int) '\ud835') << 16) | '\udd63');
    builder.put("roplus", ((int) '\u2a2e') << 16);
    builder.put("rotimes", ((int) '\u2a35') << 16);
    builder.put("rpar", ((int) '\u0029') << 16);
    builder.put("rpargt", ((int) '\u2994') << 16);
    builder.put("rppolint", ((int) '\u2a12') << 16);
    builder.put("rrarr", ((int) '\u21c9') << 16);
    builder.put("rsaquo", ((int) '\u203a') << 16);
    builder.put("rscr", (((int) '\ud835') << 16) | '\udcc7');
    builder.put("rsh", ((int) '\u21b1') << 16);
    builder.put("rsqb", ((int) '\u005d') << 16);
    builder.put("rsquo", ((int) '\u2019') << 16);
    builder.put("rsquor", ((int) '\u2019') << 16);
    builder.put("rthree", ((int) '\u22cc') << 16);
    builder.put("rtimes", ((int) '\u22ca') << 16);
    builder.put("rtri", ((int) '\u25b9') << 16);
    builder.put("rtrie", ((int) '\u22b5') << 16);
    builder.put("rtrif", ((int) '\u25b8') << 16);
    builder.put("rtriltri", ((int) '\u29ce') << 16);
    builder.put("ruluhar", ((int) '\u2968') << 16);
    builder.put("rx", ((int) '\u211e') << 16);
    builder.put("sacute", ((int) '\u015b') << 16);
    builder.put("sbquo", ((int) '\u201a') << 16);
    builder.put("sc", ((int) '\u227b') << 16);
    builder.put("scE", ((int) '\u2ab4') << 16);
    builder.put("scap", ((int) '\u2ab8') << 16);
    builder.put("scaron", ((int) '\u0161') << 16);
    builder.put("sccue", ((int) '\u227d') << 16);
    builder.put("sce", ((int) '\u2ab0') << 16);
    builder.put("scedil", ((int) '\u015f') << 16);
    builder.put("scirc", ((int) '\u015d') << 16);
    builder.put("scnE", ((int) '\u2ab6') << 16);
    builder.put("scnap", ((int) '\u2aba') << 16);
    builder.put("scnsim", ((int) '\u22e9') << 16);
    builder.put("scpolint", ((int) '\u2a13') << 16);
    builder.put("scsim", ((int) '\u227f') << 16);
    builder.put("scy", ((int) '\u0441') << 16);
    builder.put("sdot", ((int) '\u22c5') << 16);
    builder.put("sdotb", ((int) '\u22a1') << 16);
    builder.put("sdote", ((int) '\u2a66') << 16);
    builder.put("seArr", ((int) '\u21d8') << 16);
    builder.put("searhk", ((int) '\u2925') << 16);
    builder.put("searr", ((int) '\u2198') << 16);
    builder.put("searrow", ((int) '\u2198') << 16);
    builder.put("sect", ((int) '\u00a7') << 16);
    builder.put("semi", ((int) '\u003b') << 16);
    builder.put("seswar", ((int) '\u2929') << 16);
    builder.put("setminus", ((int) '\u2216') << 16);
    builder.put("setmn", ((int) '\u2216') << 16);
    builder.put("sext", ((int) '\u2736') << 16);
    builder.put("sfr", (((int) '\ud835') << 16) | '\udd30');
    builder.put("sfrown", ((int) '\u2322') << 16);
    builder.put("sharp", ((int) '\u266f') << 16);
    builder.put("shchcy", ((int) '\u0449') << 16);
    builder.put("shcy", ((int) '\u0448') << 16);
    builder.put("shortmid", ((int) '\u2223') << 16);
    builder.put("shortparallel", ((int) '\u2225') << 16);
    builder.put("shy", ((int) '\u00ad') << 16);
    builder.put("sigma", ((int) '\u03c3') << 16);
    builder.put("sigmaf", ((int) '\u03c2') << 16);
    builder.put("sigmav", ((int) '\u03c2') << 16);
    builder.put("sim", ((int) '\u223c') << 16);
    builder.put("simdot", ((int) '\u2a6a') << 16);
    builder.put("sime", ((int) '\u2243') << 16);
    builder.put("simeq", ((int) '\u2243') << 16);
    builder.put("simg", ((int) '\u2a9e') << 16);
    builder.put("simgE", ((int) '\u2aa0') << 16);
    builder.put("siml", ((int) '\u2a9d') << 16);
    builder.put("simlE", ((int) '\u2a9f') << 16);
    builder.put("simne", ((int) '\u2246') << 16);
    builder.put("simplus", ((int) '\u2a24') << 16);
    builder.put("simrarr", ((int) '\u2972') << 16);
    builder.put("slarr", ((int) '\u2190') << 16);
    builder.put("smallsetminus", ((int) '\u2216') << 16);
    builder.put("smashp", ((int) '\u2a33') << 16);
    builder.put("smeparsl", ((int) '\u29e4') << 16);
    builder.put("smid", ((int) '\u2223') << 16);
    builder.put("smile", ((int) '\u2323') << 16);
    builder.put("smt", ((int) '\u2aaa') << 16);
    builder.put("smte", ((int) '\u2aac') << 16);
    builder.put("smtes", (((int) '\u2aac') << 16) | '\ufe00');
    builder.put("softcy", ((int) '\u044c') << 16);
    builder.put("sol", ((int) '\u002f') << 16);
    builder.put("solb", ((int) '\u29c4') << 16);
    builder.put("solbar", ((int) '\u233f') << 16);
    builder.put("sopf", (((int) '\ud835') << 16) | '\udd64');
    builder.put("spades", ((int) '\u2660') << 16);
    builder.put("spadesuit", ((int) '\u2660') << 16);
    builder.put("spar", ((int) '\u2225') << 16);
    builder.put("sqcap", ((int) '\u2293') << 16);
    builder.put("sqcaps", (((int) '\u2293') << 16) | '\ufe00');
    builder.put("sqcup", ((int) '\u2294') << 16);
    builder.put("sqcups", (((int) '\u2294') << 16) | '\ufe00');
    builder.put("sqsub", ((int) '\u228f') << 16);
    builder.put("sqsube", ((int) '\u2291') << 16);
    builder.put("sqsubset", ((int) '\u228f') << 16);
    builder.put("sqsubseteq", ((int) '\u2291') << 16);
    builder.put("sqsup", ((int) '\u2290') << 16);
    builder.put("sqsupe", ((int) '\u2292') << 16);
    builder.put("sqsupset", ((int) '\u2290') << 16);
    builder.put("sqsupseteq", ((int) '\u2292') << 16);
    builder.put("squ", ((int) '\u25a1') << 16);
    builder.put("square", ((int) '\u25a1') << 16);
    builder.put("squarf", ((int) '\u25aa') << 16);
    builder.put("squf", ((int) '\u25aa') << 16);
    builder.put("srarr", ((int) '\u2192') << 16);
    builder.put("sscr", (((int) '\ud835') << 16) | '\udcc8');
    builder.put("ssetmn", ((int) '\u2216') << 16);
    builder.put("ssmile", ((int) '\u2323') << 16);
    builder.put("sstarf", ((int) '\u22c6') << 16);
    builder.put("star", ((int) '\u2606') << 16);
    builder.put("starf", ((int) '\u2605') << 16);
    builder.put("straightepsilon", ((int) '\u03f5') << 16);
    builder.put("straightphi", ((int) '\u03d5') << 16);
    builder.put("strns", ((int) '\u00af') << 16);
    builder.put("sub", ((int) '\u2282') << 16);
    builder.put("subE", ((int) '\u2ac5') << 16);
    builder.put("subdot", ((int) '\u2abd') << 16);
    builder.put("sube", ((int) '\u2286') << 16);
    builder.put("subedot", ((int) '\u2ac3') << 16);
    builder.put("submult", ((int) '\u2ac1') << 16);
    builder.put("subnE", ((int) '\u2acb') << 16);
    builder.put("subne", ((int) '\u228a') << 16);
    builder.put("subplus", ((int) '\u2abf') << 16);
    builder.put("subrarr", ((int) '\u2979') << 16);
    builder.put("subset", ((int) '\u2282') << 16);
    builder.put("subseteq", ((int) '\u2286') << 16);
    builder.put("subseteqq", ((int) '\u2ac5') << 16);
    builder.put("subsetneq", ((int) '\u228a') << 16);
    builder.put("subsetneqq", ((int) '\u2acb') << 16);
    builder.put("subsim", ((int) '\u2ac7') << 16);
    builder.put("subsub", ((int) '\u2ad5') << 16);
    builder.put("subsup", ((int) '\u2ad3') << 16);
    builder.put("succ", ((int) '\u227b') << 16);
    builder.put("succapprox", ((int) '\u2ab8') << 16);
    builder.put("succcurlyeq", ((int) '\u227d') << 16);
    builder.put("succeq", ((int) '\u2ab0') << 16);
    builder.put("succnapprox", ((int) '\u2aba') << 16);
    builder.put("succneqq", ((int) '\u2ab6') << 16);
    builder.put("succnsim", ((int) '\u22e9') << 16);
    builder.put("succsim", ((int) '\u227f') << 16);
    builder.put("sum", ((int) '\u2211') << 16);
    builder.put("sung", ((int) '\u266a') << 16);
    builder.put("sup1", ((int) '\u00b9') << 16);
    builder.put("sup2", ((int) '\u00b2') << 16);
    builder.put("sup3", ((int) '\u00b3') << 16);
    builder.put("sup", ((int) '\u2283') << 16);
    builder.put("supE", ((int) '\u2ac6') << 16);
    builder.put("supdot", ((int) '\u2abe') << 16);
    builder.put("supdsub", ((int) '\u2ad8') << 16);
    builder.put("supe", ((int) '\u2287') << 16);
    builder.put("supedot", ((int) '\u2ac4') << 16);
    builder.put("suphsol", ((int) '\u27c9') << 16);
    builder.put("suphsub", ((int) '\u2ad7') << 16);
    builder.put("suplarr", ((int) '\u297b') << 16);
    builder.put("supmult", ((int) '\u2ac2') << 16);
    builder.put("supnE", ((int) '\u2acc') << 16);
    builder.put("supne", ((int) '\u228b') << 16);
    builder.put("supplus", ((int) '\u2ac0') << 16);
    builder.put("supset", ((int) '\u2283') << 16);
    builder.put("supseteq", ((int) '\u2287') << 16);
    builder.put("supseteqq", ((int) '\u2ac6') << 16);
    builder.put("supsetneq", ((int) '\u228b') << 16);
    builder.put("supsetneqq", ((int) '\u2acc') << 16);
    builder.put("supsim", ((int) '\u2ac8') << 16);
    builder.put("supsub", ((int) '\u2ad4') << 16);
    builder.put("supsup", ((int) '\u2ad6') << 16);
    builder.put("swArr", ((int) '\u21d9') << 16);
    builder.put("swarhk", ((int) '\u2926') << 16);
    builder.put("swarr", ((int) '\u2199') << 16);
    builder.put("swarrow", ((int) '\u2199') << 16);
    builder.put("swnwar", ((int) '\u292a') << 16);
    builder.put("szlig", ((int) '\u00df') << 16);
    builder.put("target", ((int) '\u2316') << 16);
    builder.put("tau", ((int) '\u03c4') << 16);
    builder.put("tbrk", ((int) '\u23b4') << 16);
    builder.put("tcaron", ((int) '\u0165') << 16);
    builder.put("tcedil", ((int) '\u0163') << 16);
    builder.put("tcy", ((int) '\u0442') << 16);
    builder.put("tdot", ((int) '\u20db') << 16);
    builder.put("telrec", ((int) '\u2315') << 16);
    builder.put("tfr", (((int) '\ud835') << 16) | '\udd31');
    builder.put("there4", ((int) '\u2234') << 16);
    builder.put("therefore", ((int) '\u2234') << 16);
    builder.put("theta", ((int) '\u03b8') << 16);
    builder.put("thetasym", ((int) '\u03d1') << 16);
    builder.put("thetav", ((int) '\u03d1') << 16);
    builder.put("thickapprox", ((int) '\u2248') << 16);
    builder.put("thicksim", ((int) '\u223c') << 16);
    builder.put("thinsp", ((int) '\u2009') << 16);
    builder.put("thkap", ((int) '\u2248') << 16);
    builder.put("thksim", ((int) '\u223c') << 16);
    builder.put("thorn", ((int) '\u00fe') << 16);
    builder.put("tilde", ((int) '\u02dc') << 16);
    builder.put("times", ((int) '\u00d7') << 16);
    builder.put("timesb", ((int) '\u22a0') << 16);
    builder.put("timesbar", ((int) '\u2a31') << 16);
    builder.put("timesd", ((int) '\u2a30') << 16);
    builder.put("tint", ((int) '\u222d') << 16);
    builder.put("toea", ((int) '\u2928') << 16);
    builder.put("top", ((int) '\u22a4') << 16);
    builder.put("topbot", ((int) '\u2336') << 16);
    builder.put("topcir", ((int) '\u2af1') << 16);
    builder.put("topf", (((int) '\ud835') << 16) | '\udd65');
    builder.put("topfork", ((int) '\u2ada') << 16);
    builder.put("tosa", ((int) '\u2929') << 16);
    builder.put("tprime", ((int) '\u2034') << 16);
    builder.put("trade", ((int) '\u2122') << 16);
    builder.put("triangle", ((int) '\u25b5') << 16);
    builder.put("triangledown", ((int) '\u25bf') << 16);
    builder.put("triangleleft", ((int) '\u25c3') << 16);
    builder.put("trianglelefteq", ((int) '\u22b4') << 16);
    builder.put("triangleq", ((int) '\u225c') << 16);
    builder.put("triangleright", ((int) '\u25b9') << 16);
    builder.put("trianglerighteq", ((int) '\u22b5') << 16);
    builder.put("tridot", ((int) '\u25ec') << 16);
    builder.put("trie", ((int) '\u225c') << 16);
    builder.put("triminus", ((int) '\u2a3a') << 16);
    builder.put("triplus", ((int) '\u2a39') << 16);
    builder.put("trisb", ((int) '\u29cd') << 16);
    builder.put("tritime", ((int) '\u2a3b') << 16);
    builder.put("trpezium", ((int) '\u23e2') << 16);
    builder.put("tscr", (((int) '\ud835') << 16) | '\udcc9');
    builder.put("tscy", ((int) '\u0446') << 16);
    builder.put("tshcy", ((int) '\u045b') << 16);
    builder.put("tstrok", ((int) '\u0167') << 16);
    builder.put("twixt", ((int) '\u226c') << 16);
    builder.put("twoheadleftarrow", ((int) '\u219e') << 16);
    builder.put("twoheadrightarrow", ((int) '\u21a0') << 16);
    builder.put("uArr", ((int) '\u21d1') << 16);
    builder.put("uHar", ((int) '\u2963') << 16);
    builder.put("uacute", ((int) '\u00fa') << 16);
    builder.put("uarr", ((int) '\u2191') << 16);
    builder.put("ubrcy", ((int) '\u045e') << 16);
    builder.put("ubreve", ((int) '\u016d') << 16);
    builder.put("ucirc", ((int) '\u00fb') << 16);
    builder.put("ucy", ((int) '\u0443') << 16);
    builder.put("udarr", ((int) '\u21c5') << 16);
    builder.put("udblac", ((int) '\u0171') << 16);
    builder.put("udhar", ((int) '\u296e') << 16);
    builder.put("ufisht", ((int) '\u297e') << 16);
    builder.put("ufr", (((int) '\ud835') << 16) | '\udd32');
    builder.put("ugrave", ((int) '\u00f9') << 16);
    builder.put("uharl", ((int) '\u21bf') << 16);
    builder.put("uharr", ((int) '\u21be') << 16);
    builder.put("uhblk", ((int) '\u2580') << 16);
    builder.put("ulcorn", ((int) '\u231c') << 16);
    builder.put("ulcorner", ((int) '\u231c') << 16);
    builder.put("ulcrop", ((int) '\u230f') << 16);
    builder.put("ultri", ((int) '\u25f8') << 16);
    builder.put("umacr", ((int) '\u016b') << 16);
    builder.put("uml", ((int) '\u00a8') << 16);
    builder.put("uogon", ((int) '\u0173') << 16);
    builder.put("uopf", (((int) '\ud835') << 16) | '\udd66');
    builder.put("uparrow", ((int) '\u2191') << 16);
    builder.put("updownarrow", ((int) '\u2195') << 16);
    builder.put("upharpoonleft", ((int) '\u21bf') << 16);
    builder.put("upharpoonright", ((int) '\u21be') << 16);
    builder.put("uplus", ((int) '\u228e') << 16);
    builder.put("upsi", ((int) '\u03c5') << 16);
    builder.put("upsih", ((int) '\u03d2') << 16);
    builder.put("upsilon", ((int) '\u03c5') << 16);
    builder.put("upuparrows", ((int) '\u21c8') << 16);
    builder.put("urcorn", ((int) '\u231d') << 16);
    builder.put("urcorner", ((int) '\u231d') << 16);
    builder.put("urcrop", ((int) '\u230e') << 16);
    builder.put("uring", ((int) '\u016f') << 16);
    builder.put("urtri", ((int) '\u25f9') << 16);
    builder.put("uscr", (((int) '\ud835') << 16) | '\udcca');
    builder.put("utdot", ((int) '\u22f0') << 16);
    builder.put("utilde", ((int) '\u0169') << 16);
    builder.put("utri", ((int) '\u25b5') << 16);
    builder.put("utrif", ((int) '\u25b4') << 16);
    builder.put("uuarr", ((int) '\u21c8') << 16);
    builder.put("uuml", ((int) '\u00fc') << 16);
    builder.put("uwangle", ((int) '\u29a7') << 16);
    builder.put("vArr", ((int) '\u21d5') << 16);
    builder.put("vBar", ((int) '\u2ae8') << 16);
    builder.put("vBarv", ((int) '\u2ae9') << 16);
    builder.put("vDash", ((int) '\u22a8') << 16);
    builder.put("vangrt", ((int) '\u299c') << 16);
    builder.put("varepsilon", ((int) '\u03f5') << 16);
    builder.put("varkappa", ((int) '\u03f0') << 16);
    builder.put("varnothing", ((int) '\u2205') << 16);
    builder.put("varphi", ((int) '\u03d5') << 16);
    builder.put("varpi", ((int) '\u03d6') << 16);
    builder.put("varpropto", ((int) '\u221d') << 16);
    builder.put("varr", ((int) '\u2195') << 16);
    builder.put("varrho", ((int) '\u03f1') << 16);
    builder.put("varsigma", ((int) '\u03c2') << 16);
    builder.put("varsubsetneq", (((int) '\u228a') << 16) | '\ufe00');
    builder.put("varsubsetneqq", (((int) '\u2acb') << 16) | '\ufe00');
    builder.put("varsupsetneq", (((int) '\u228b') << 16) | '\ufe00');
    builder.put("varsupsetneqq", (((int) '\u2acc') << 16) | '\ufe00');
    builder.put("vartheta", ((int) '\u03d1') << 16);
    builder.put("vartriangleleft", ((int) '\u22b2') << 16);
    builder.put("vartriangleright", ((int) '\u22b3') << 16);
    builder.put("vcy", ((int) '\u0432') << 16);
    builder.put("vdash", ((int) '\u22a2') << 16);
    builder.put("vee", ((int) '\u2228') << 16);
    builder.put("veebar", ((int) '\u22bb') << 16);
    builder.put("veeeq", ((int) '\u225a') << 16);
    builder.put("vellip", ((int) '\u22ee') << 16);
    builder.put("verbar", ((int) '\u007c') << 16);
    builder.put("vert", ((int) '\u007c') << 16);
    builder.put("vfr", (((int) '\ud835') << 16) | '\udd33');
    builder.put("vltri", ((int) '\u22b2') << 16);
    builder.put("vnsub", (((int) '\u2282') << 16) | '\u20d2');
    builder.put("vnsup", (((int) '\u2283') << 16) | '\u20d2');
    builder.put("vopf", (((int) '\ud835') << 16) | '\udd67');
    builder.put("vprop", ((int) '\u221d') << 16);
    builder.put("vrtri", ((int) '\u22b3') << 16);
    builder.put("vscr", (((int) '\ud835') << 16) | '\udccb');
    builder.put("vsubnE", (((int) '\u2acb') << 16) | '\ufe00');
    builder.put("vsubne", (((int) '\u228a') << 16) | '\ufe00');
    builder.put("vsupnE", (((int) '\u2acc') << 16) | '\ufe00');
    builder.put("vsupne", (((int) '\u228b') << 16) | '\ufe00');
    builder.put("vzigzag", ((int) '\u299a') << 16);
    builder.put("wcirc", ((int) '\u0175') << 16);
    builder.put("wedbar", ((int) '\u2a5f') << 16);
    builder.put("wedge", ((int) '\u2227') << 16);
    builder.put("wedgeq", ((int) '\u2259') << 16);
    builder.put("weierp", ((int) '\u2118') << 16);
    builder.put("wfr", (((int) '\ud835') << 16) | '\udd34');
    builder.put("wopf", (((int) '\ud835') << 16) | '\udd68');
    builder.put("wp", ((int) '\u2118') << 16);
    builder.put("wr", ((int) '\u2240') << 16);
    builder.put("wreath", ((int) '\u2240') << 16);
    builder.put("wscr", (((int) '\ud835') << 16) | '\udccc');
    builder.put("xcap", ((int) '\u22c2') << 16);
    builder.put("xcirc", ((int) '\u25ef') << 16);
    builder.put("xcup", ((int) '\u22c3') << 16);
    builder.put("xdtri", ((int) '\u25bd') << 16);
    builder.put("xfr", (((int) '\ud835') << 16) | '\udd35');
    builder.put("xhArr", ((int) '\u27fa') << 16);
    builder.put("xharr", ((int) '\u27f7') << 16);
    builder.put("xi", ((int) '\u03be') << 16);
    builder.put("xlArr", ((int) '\u27f8') << 16);
    builder.put("xlarr", ((int) '\u27f5') << 16);
    builder.put("xmap", ((int) '\u27fc') << 16);
    builder.put("xnis", ((int) '\u22fb') << 16);
    builder.put("xodot", ((int) '\u2a00') << 16);
    builder.put("xopf", (((int) '\ud835') << 16) | '\udd69');
    builder.put("xoplus", ((int) '\u2a01') << 16);
    builder.put("xotime", ((int) '\u2a02') << 16);
    builder.put("xrArr", ((int) '\u27f9') << 16);
    builder.put("xrarr", ((int) '\u27f6') << 16);
    builder.put("xscr", (((int) '\ud835') << 16) | '\udccd');
    builder.put("xsqcup", ((int) '\u2a06') << 16);
    builder.put("xuplus", ((int) '\u2a04') << 16);
    builder.put("xutri", ((int) '\u25b3') << 16);
    builder.put("xvee", ((int) '\u22c1') << 16);
    builder.put("xwedge", ((int) '\u22c0') << 16);
    builder.put("yacute", ((int) '\u00fd') << 16);
    builder.put("yacy", ((int) '\u044f') << 16);
    builder.put("ycirc", ((int) '\u0177') << 16);
    builder.put("ycy", ((int) '\u044b') << 16);
    builder.put("yen", ((int) '\u00a5') << 16);
    builder.put("yfr", (((int) '\ud835') << 16) | '\udd36');
    builder.put("yicy", ((int) '\u0457') << 16);
    builder.put("yopf", (((int) '\ud835') << 16) | '\udd6a');
    builder.put("yscr", (((int) '\ud835') << 16) | '\udcce');
    builder.put("yucy", ((int) '\u044e') << 16);
    builder.put("yuml", ((int) '\u00ff') << 16);
    builder.put("zacute", ((int) '\u017a') << 16);
    builder.put("zcaron", ((int) '\u017e') << 16);
    builder.put("zcy", ((int) '\u0437') << 16);
    builder.put("zdot", ((int) '\u017c') << 16);
    builder.put("zeetrf", ((int) '\u2128') << 16);
    builder.put("zeta", ((int) '\u03b6') << 16);
    builder.put("zfr", (((int) '\ud835') << 16) | '\udd37');
    builder.put("zhcy", ((int) '\u0436') << 16);
    builder.put("zigrarr", ((int) '\u21dd') << 16);
    builder.put("zopf", (((int) '\ud835') << 16) | '\udd6b');
    builder.put("zscr", (((int) '\ud835') << 16) | '\udccf');
    builder.put("zwj", ((int) '\u200d') << 16);
    builder.put("zwnj", ((int) '\u200c') << 16);

    final Map<String, Integer> entityNameToCodePointMap = builder.build();

    int longestEntityName = 0;
    for (String entityName : entityNameToCodePointMap.keySet()) {
      if (entityName.length() > longestEntityName) {
        longestEntityName = entityName.length();
      }
    }

    ENTITY_TRIE = new Trie(entityNameToCodePointMap);
    LONGEST_ENTITY_NAME = longestEntityName;
  }

  /**
   * Decodes any HTML entity at the given location.  This handles both named and
   * numeric entities.
   *
   * @param html HTML text.
   * @param offset the position of the sequence to decode.
   * @param limit the last position in chars that could be part of the sequence
   *    to decode.
   * @return The offset after the end of the decoded sequence and the decoded
   *    code-unit(s) packed into a long.
   *    The first 32 bits are the offset. The next 16 bits are the first
   *    code-unit. The last 16 bits are either the second code-unit or 0x0000
   *    if there is only one code-unit.
   */
  public static long decodeEntityAt(String html, int offset, int limit) {
    char ch = html.charAt(offset);
    if ('&' != ch) {
      return ((offset + 1L) << 32) | (((long) ch) << 16);
    }

    int entityLimit = Math.min(limit, offset + LONGEST_ENTITY_NAME + 2); // + 2 for & and ; characters
    int end = -1;
    int tail = -1;
    if (entityLimit == limit) {
      // Assume a broken entity that ends at the end until shown otherwise.
      end = tail = entityLimit;
    }
    entityloop:
    for (int i = offset + 1; i < entityLimit; ++i) {
      switch (html.charAt(i)) {
        case ';':  // An unbroken entity.
          end = i;
          tail = end + 1;
          break entityloop;
        case '#':
        case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
        case 'G': case 'H': case 'I': case 'J': case 'K': case 'L':
        case 'M': case 'N': case 'O': case 'P': case 'Q': case 'R':
        case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':
        case 'Y': case 'Z':
        case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
        case 'g': case 'h': case 'i': case 'j': case 'k': case 'l':
        case 'm': case 'n': case 'o': case 'p': case 'q': case 'r':
        case 's': case 't': case 'u': case 'v': case 'w': case 'x':
        case 'y': case 'z':
        case '0': case '1': case '2': case '3': case '4': case '5':
        case '6': case '7': case '8': case '9':
          break;
        case '=':
          // An equal sign after an entity missing a closing semicolon should
          // never have the semicolon inserted since that causes trouble with
          // parameters in partially encoded URLs.
          return ((offset + 1L) << 32) | (((long) '&') << 16);
        default:  // A possible broken entity.
          end = i;
          tail = i;
          break entityloop;
      }
    }
    if (end < 0 || offset + 2 >= end) {
      return ((offset + 1L) << 32) | (((long) '&') << 16);
    }
    // Now we know where the entity ends, and that there is at least one
    // character in the entity name
    char ch1 = html.charAt(offset + 1);
    char ch2 = html.charAt(offset + 2);
    int codepoint = -1;
    if ('#' == ch1) {
      // numeric entity
      if ('x' == ch2 || 'X' == ch2) {
        if (end == offset + 3) {  // No digits
          return ((offset + 1L) << 32) | (((long) '&') << 16);
        }
        codepoint = 0;
        // hex literal
        digloop:
        for (int i = offset + 3; i < end; ++i) {
          char digit = html.charAt(i);
          switch (digit & 0xfff8) {
            case 0x30: case 0x38: // ASCII 48-57 are '0'-'9'
              int decDig = digit & 0xf;
              if (decDig < 10) {
                codepoint = (codepoint << 4) | decDig;
              } else {
                codepoint = -1;
                break digloop;
              }
              break;
            // ASCII 65-70 and 97-102 are 'A'-'Z' && 'a'-'z'
            case 0x40: case 0x60:
              int hexDig = (digit & 0x7);
              if (hexDig != 0 && hexDig < 7) {
                codepoint = (codepoint << 4) | (hexDig + 9);
              } else {
                codepoint = -1;
                break digloop;
              }
              break;
            default:
              codepoint = -1;
              break digloop;
          }
        }
        if (codepoint > Character.MAX_CODE_POINT) {
          codepoint = 0xfffd;  // Unknown.
        }
      } else {
        codepoint = 0;
        // decimal literal
        digloop:
        for (int i = offset + 2; i < end; ++i) {
          char digit = html.charAt(i);
          switch (digit & 0xfff8) {
            case 0x30: case 0x38: // ASCII 48-57 are '0'-'9'
              int decDig = digit - '0';
              if (decDig < 10) {
                codepoint = (codepoint * 10) + decDig;
              } else {
                codepoint = -1;
                break digloop;
              }
              break;
            default:
              codepoint = -1;
              break digloop;
          }
        }
        if (codepoint > Character.MAX_CODE_POINT) {
          codepoint = 0xfffd;  // Unknown.
        }
      }
    } else {
      Trie t = ENTITY_TRIE;
      for (int i = offset + 1; i < end; ++i) {
        char nameChar = html.charAt(i);
        t = t.lookup(nameChar);
        if (t == null) { break; }
      }
      if (t == null) {
        t = ENTITY_TRIE;
        for (int i = offset + 1; i < end; ++i) {
          char nameChar = html.charAt(i);
          if ('Z' >= nameChar && nameChar >= 'A') { nameChar |= 32; }
          t = t.lookup(nameChar);
          if (t == null) { break; }
        }
      }
      if (t != null && t.isTerminal()) {
        return (((long) tail) << 32) | (t.getValue() & 0xffffffffL);
      }
    }
    if (codepoint < 0) {
      return ((offset + 1L) << 32) | (((long) '&') << 16);
    }
    // Code-point is a BMP value
    if (codepoint >>> 16 == 0) {
      return (((long) tail) << 32) | (((long) codepoint) << 16);
    }
    // Code-point is supplementary
    char highSurrogate = (char) ((codepoint >>> 10)
        + (MIN_HIGH_SURROGATE - (MIN_SUPPLEMENTARY_CODE_POINT >>> 10)));
    char lowSurrogate = (char) ((codepoint & 0x3ff) + MIN_LOW_SURROGATE);
    return (((long) tail) << 32) | (((long) highSurrogate) << 16) | lowSurrogate;
  }

//  /** A possible entity name like "amp" or "gt". */
//  public static boolean isEntityName(String name) {
//    Trie t = ENTITY_TRIE;
//    int n = name.length();
//
//    // Treat AMP the same amp, but not Amp.
//    boolean isUcase = true;
//    for (int i = 0; i < n; ++i) {
//      char ch = name.charAt(i);
//      if (!('A' <= ch && ch <= 'Z')) {
//        isUcase = false;
//        break;
//      }
//    }
//
//    if (isUcase) { name = Strings.toLowerCase(name); }
//
//    for (int i = 0; i < n; ++i) {
//      t = t.lookup(name.charAt(i));
//      if (t == null) { return false; }
//    }
//    return t.isTerminal();
//  }

  private HtmlEntities() { /* uninstantiable */ }
}
